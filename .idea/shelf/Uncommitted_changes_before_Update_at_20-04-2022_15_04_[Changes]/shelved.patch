Index: pipeline/loadFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os, mne, time, re\r\nfrom mne.io import read_raw_edf\r\nfrom collections import defaultdict\r\nfrom datetime import datetime, timezone\r\nimport pandas as pd\r\nimport numpy as np\r\nimport torch\r\nfrom preprocessFunctions import simplePreprocess, rereference, preprocessRaw\r\nimport matplotlib.pyplot as plt\r\nfrom scipy import signal, stats\r\n\r\nplt.rcParams[\"font.family\"] = \"Times New Roman\"\r\n\r\n##These functions are either inspired from or modified copies of code written by David Nyrnberg:\r\n# https://github.com/DavidEnslevNyrnberg/DTU_DL_EEG/tree/0bfd1a9349f60f44e6f7df5aa6820434e44263a2/Transfer%20learning%20project\r\n\r\n\r\nclass TUH_data:\r\n    def __init__(self, path):\r\n        ### Makes dictionary of all edf files\r\n        EEG_count = 0\r\n        EEG_dict = {}\r\n\r\n        for dirpath, dirnames, filenames in os.walk(path):\r\n            for filename in [f for f in filenames if f.endswith(\".edf\")]:\r\n                \"\"\"For every edf file found somewhere in the directory, it is assumed the folders hold the structure: \r\n                \".../id/patientId/sessionId/edfFile\".\r\n                Therefore the path is split backwards and the EEG_dict updated with the found ids/paths.\r\n                Furthermore it is expected that a csv file will always be found in the directory.\"\"\"\r\n                session_path_split = os.path.split(dirpath)\r\n                patient_path_split = os.path.split(session_path_split[0])\r\n                id_path_split = os.path.split(patient_path_split[0])\r\n                EEG_dict.update({EEG_count: {\"id\": id_path_split[1],\r\n                                             \"patient_id\": patient_path_split[1],\r\n                                             \"session\": session_path_split[1],\r\n                                             \"path\": os.path.join(dirpath, filename),\r\n                                             \"csvpath\": os.path.join(dirpath, os.path.splitext(filename)[0]+'.csv')}})\r\n                EEG_count += 1\r\n        self.EEG_dict = EEG_dict\r\n        self.EEG_count = EEG_count\r\n\r\n    \"\"\" These functions could probably be deleted, but are nice in case we want a quick plot of a raw file.\r\n    def loadOneRaw(self, id):\r\n        return mne.io.read_raw_edf(self.EEG_dict[id][\"path\"], preload=True)\r\n\r\n    def loadAllRaw(self):\r\n        EEG_raw_dict = {}\r\n        for id in range(self.EEG_count):\r\n            EEG_raw_dict[id] = self.loadOneRaw(id)\r\n        self.EEG_raw_dict = EEG_raw_dict\r\n        \"\"\"\r\n\r\n    def readRawEdf(self, edfDict=None, tWindow=120, tStep=30,\r\n                   read_raw_edf_param={'preload': True, \"stim_channel\": \"auto\"}):\r\n        try:\r\n            edfDict[\"rawData\"] = read_raw_edf(edfDict[\"path\"], **read_raw_edf_param)\r\n            edfDict[\"fS\"] = edfDict[\"rawData\"].info[\"sfreq\"]\r\n            t_start = edfDict[\"rawData\"].annotations.orig_time\r\n            if t_start.timestamp() <= 0:\r\n                edfDict[\"t0\"] = datetime.fromtimestamp(0, tz=timezone.utc)\r\n                t_last = edfDict[\"t0\"].timestamp() + edfDict[\"rawData\"]._last_time + 1 / edfDict[\"fS\"]\r\n                edfDict[\"tN\"] = datetime.fromtimestamp(t_last, tz=timezone.utc)\r\n            else:\r\n                t_last = t_start.timestamp() + edfDict[\"rawData\"]._last_time + 1 / edfDict[\"fS\"]\r\n                edfDict[\"t0\"] = t_start  # datetime.fromtimestamp(t_start.timestamp(), tz=timezone.utc)\r\n                edfDict[\"tN\"] = datetime.fromtimestamp(t_last, tz=timezone.utc)\r\n\r\n            edfDict[\"tWindow\"] = float(tWindow)  # width of EEG sample window, given in (sec)\r\n            edfDict[\"tStep\"] = float(tStep)  # step/overlap between EEG sample windows, given in (sec)\r\n\r\n        except:\r\n            print(\"error break please inspect:\\n %s\\n~~~~~~~~~~~~\" % edfDict[\"rawData\"].filenames[0])\r\n\r\n        return edfDict\r\n\r\n    def electrodeCLFPrep(self, tWindow=100, tStep=100 *.25,plot=False):\r\n        tic = time.time()\r\n        subjects_TUAR19 = defaultdict(dict)\r\n        Xwindows = []\r\n        Ywindows = []\r\n        for k in range(len(self.EEG_dict)):\r\n            subjects_TUAR19[k] = {'path': self.EEG_dict[k]['path']}\r\n\r\n            proc_subject = subjects_TUAR19[k]\r\n            proc_subject = self.readRawEdf(proc_subject, tWindow=tWindow, tStep=tStep,\r\n                                           read_raw_edf_param={'preload': True})\r\n\r\n            proc_subject[\"rawData\"] = TUH_rename_ch(proc_subject[\"rawData\"])\r\n            TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',\r\n                        'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed\r\n            proc_subject[\"rawData\"].pick_channels(ch_names=TUH_pick)\r\n            proc_subject[\"rawData\"].reorder_channels(TUH_pick)\r\n\r\n            if k == 0 and plot:\r\n                #Plot the energy voltage potential against frequency.\r\n                proc_subject[\"rawData\"].plot_psd(tmax=np.inf, fmax=128, average=True)\r\n\r\n                raw_anno = annotate_TUH(proc_subject[\"rawData\"],annoPath=self.EEG_dict[k][\"csvpath\"])\r\n                raw_anno.plot()\r\n                plt.title(\"Untouched raw signal\")\r\n                plt.show()\r\n\r\n            simplePreprocess(proc_subject[\"rawData\"], cap_setup=\"standard_1005\", lpfq=1, hpfq=40, notchfq=60,\r\n                     downSam=250)\r\n\r\n            if k == 0:\r\n\r\n                self.sfreq = proc_subject[\"rawData\"].info[\"sfreq\"]\r\n                self.ch_names = proc_subject[\"rawData\"].info[\"ch_names\"]\r\n                if plot:\r\n                    proc_subject[\"rawData\"].plot_psd(tmax=np.inf, fmax=125, average=True)\r\n\r\n                    raw_anno = annotate_TUH(proc_subject[\"rawData\"], annoPath=self.EEG_dict[k][\"csvpath\"])\r\n                    raw_anno.plot()\r\n                    plt.title(\"Raw signal after simple preprocessing\")\r\n                    plt.show()\r\n\r\n\r\n            # Generate output windows for (X,y) as (array, label)\r\n            proc_subject[\"preprocessing_output\"] = slidingRawWindow(proc_subject,\r\n                                                                    t_max=proc_subject[\"rawData\"].times[-1],\r\n                                                                    tStep=proc_subject[\"tStep\"])\r\n\r\n            for window in proc_subject[\"preprocessing_output\"].values():\r\n                Xwindows.append(window[0])\r\n                Ywindows.append(window[1])\r\n\r\n        toc = time.time()\r\n        print(\"\\n~~~~~~~~~~~~~~~~~~~~\\n\"\r\n              \"it took %imin:%is to run electrode classifier preprocess-pipeline for %i patients\\n with window length [%.2fs] and t_step [%.2fs]\"\r\n              \"\\n~~~~~~~~~~~~~~~~~~~~\\n\" % (int((toc - tic) / 60), int((toc - tic) % 60), len(subjects_TUAR19),\r\n                                            tWindow, tStep))\r\n\r\n        return Xwindows, Ywindows\r\n\r\n    def prep(self, tWindow=100, tStep=100 *.25,plot=False):\r\n        self.tWindow=tWindow\r\n        self.tStep=tStep\r\n        tic = time.time()\r\n        subjects_TUAR19 = defaultdict(dict)\r\n        Xwindows = []\r\n        Ywindows = []\r\n        for k in range(len(self.EEG_dict)):\r\n            subjects_TUAR19[k] = {'path': self.EEG_dict[k]['path']}\r\n\r\n            proc_subject = subjects_TUAR19[k]\r\n            proc_subject = self.readRawEdf(proc_subject, tWindow=tWindow, tStep=tStep,\r\n                                           read_raw_edf_param={'preload': True})\r\n\r\n            proc_subject[\"rawData\"] = TUH_rename_ch(proc_subject[\"rawData\"])\r\n            TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',\r\n                        'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed\r\n            proc_subject[\"rawData\"].pick_channels(ch_names=TUH_pick)\r\n            proc_subject[\"rawData\"].reorder_channels(TUH_pick)\r\n\r\n            if k == 0 and plot:\r\n                #Plot the energy voltage potential against frequency.\r\n                proc_subject[\"rawData\"].plot_psd(tmax=np.inf, fmax=128, average=True)\r\n\r\n                raw_anno = annotate_TUH(proc_subject[\"rawData\"],annoPath=self.EEG_dict[k][\"csvpath\"])\r\n                raw_anno.plot()\r\n                plt.show()\r\n\r\n            preprocessRaw(proc_subject[\"rawData\"], cap_setup=\"standard_1005\", lpfq=1, hpfq=40, notchfq=60,\r\n                     downSam=250)\r\n\r\n            if k == 0:\r\n\r\n                self.sfreq = proc_subject[\"rawData\"].info[\"sfreq\"]\r\n                self.ch_names = proc_subject[\"rawData\"].info[\"ch_names\"]\r\n                if plot:\r\n                    proc_subject[\"rawData\"].plot_psd(tmax=np.inf, fmax=125, average=True)\r\n\r\n                    raw_anno = annotate_TUH(proc_subject[\"rawData\"], annoPath=self.EEG_dict[k][\"csvpath\"])\r\n                    raw_anno.plot()\r\n                    plt.show()\r\n\r\n            # Generate output windows for (X,y) as (array, label)\r\n            proc_subject[\"preprocessing_output\"] = slidingRawWindow(proc_subject,\r\n                                                                    t_max=proc_subject[\"rawData\"].times[-1],\r\n                                                                    tStep=proc_subject[\"tStep\"])\r\n\r\n            for window in proc_subject[\"preprocessing_output\"].values():\r\n                Xwindows.append(window[0])\r\n                Ywindows.append(window[1])\r\n\r\n        toc = time.time()\r\n        print(\"\\n~~~~~~~~~~~~~~~~~~~~\\n\"\r\n              \"it took %imin:%is to run preprocess-pipeline for %i patients\\n with window length [%.2fs] and t_step [%.2fs]\"\r\n              \"\\n~~~~~~~~~~~~~~~~~~~~\\n\" % (int((toc - tic) / 60), int((toc - tic) % 60), len(subjects_TUAR19),\r\n                                            tWindow, tStep))\r\n\r\n        self.Xwindows = Xwindows\r\n        self.Ywindows = Ywindows\r\n\r\n    def specMaker(self):\r\n        Xwindows=self.Xwindows\r\n        Freq = self.sfreq\r\n        tWindow=self.tWindow\r\n        tStep=self.tStep\r\n        overlap=(tWindow-tStep)/tWindow #The amount of the window that overlaps with the next window.\r\n\r\n        for k in range(len(Xwindows)):\r\n            spectrogramMake(Xwindows[k], Freq,FFToverlap=overlap,tWindow=tWindow, show_chan_num=1,chan_names=self.ch_names)\r\n\r\n# renames TUH channels to conventional 10-20 system\r\ndef TUH_rename_ch(MNE_raw=False):\r\n    # MNE_raw\r\n    # mne.channels.rename_channels(MNE_raw.info, {\"PHOTIC-REF\": \"PROTIC\"})\r\n    for i in MNE_raw.info[\"ch_names\"]:\r\n        reSTR = r\"(?<=EEG )(\\S*)(?=-REF)\"  # working reSTR = r\"(?<=EEG )(.*)(?=-REF)\"\r\n        reLowC = ['FP1', 'FP2', 'FZ', 'CZ', 'PZ']\r\n\r\n        if re.search(reSTR, i) and re.search(reSTR, i).group() in reLowC:\r\n            lowC = i[0:5]+i[5].lower()+i[6:]\r\n            mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR, lowC)[0]})\r\n        elif i == \"PHOTIC-REF\":\r\n            mne.channels.rename_channels(MNE_raw.info, {i: \"PHOTIC\"})\r\n        elif re.search(reSTR, i):\r\n            mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR, i)[0]})\r\n        else:\r\n            continue\r\n            # print(i)\r\n    print(MNE_raw.info[\"ch_names\"])\r\n    return MNE_raw\r\n\r\ndef label_TUH(annoPath=False, window=[0, 0], header=None):  # saveDir=os.getcwd(),\r\n    df = pd.read_csv(annoPath, sep=\",\", skiprows=6, header=header)\r\n    df.fillna('null', inplace=True)\r\n    within_con0 = (df[2] <= window[0]) & (window[0] <= df[3])\r\n    within_con1 = (df[2] <= window[1]) & (window[1] <= df[3])\r\n    label_TUH = df[df[2].between(window[0], window[1]) |\r\n                   df[3].between(window[0], window[1]) |\r\n                   (within_con0 & within_con1)]\r\n    label_df = label_TUH.rename(columns={2: 't_start', 3: 't_end', 4: 'label', 5: 'confidence'})[\"label\"]  # Renamer headers i pandas dataen\r\n    return_list = label_df.to_numpy().tolist()  # Outputter kun listen af label navne i vinduet, fx [\"eyem\", \"null\"]\r\n    return return_list\r\n\r\n\r\ndef makeArrayWindow(MNE_raw=None, t0=0, tWindow=120):\r\n    # take a raw signal and make a window given time specifications. Outputs an array, because of raw.get_data().\r\n    chWindows = MNE_raw.get_data(start=int(t0), stop=int(t0 + tWindow), reject_by_annotation=\"omit\", picks=['eeg'])\r\n    return chWindows\r\n\r\n\r\ndef slidingRawWindow(EEG_series=None, t_max=0, tStep=1):\r\n    # catch correct sample frequency and end sample\r\n    edf_fS = EEG_series[\"rawData\"].info[\"sfreq\"]\r\n    t_N = int(t_max * edf_fS)\r\n\r\n    # ensure window-overlaps progress in sample interger\r\n    if float(tStep * edf_fS) == float(int(tStep * edf_fS)):\r\n        t_overlap = int(tStep * edf_fS)\r\n    else:\r\n        t_overlap = int(tStep * edf_fS)\r\n        overlap_change = 100 - (t_overlap / edf_fS) * 100\r\n        print(\"\\n  tStep [%.3f], overlap does not equal an interger [%f] and have been rounded to %i\"\r\n              \"\\n  equaling to %.1f%% overlap or %.3fs time steps\\n\\n\"\r\n              % (tStep, tStep * edf_fS, t_overlap, overlap_change, t_overlap / edf_fS))\r\n\r\n    # initialize variables for segments\r\n    window_EEG = defaultdict(tuple)\r\n    window_width = int(EEG_series[\"tWindow\"] * edf_fS)\r\n    label_path = EEG_series['path'].split(\".edf\")[0] + \".csv\"\r\n\r\n    # segment all N-1 windows (by positive lookahead)\r\n    for i in range(0, t_N - window_width, t_overlap):\r\n        t_start = i / edf_fS\r\n        t_end = (i + window_width) / edf_fS\r\n        window_key = \"window_%.3fs_%.3fs\" % (t_start, t_end)\r\n        window_data = makeArrayWindow(EEG_series[\"rawData\"], t0=i, tWindow=window_width)  # , show_chan_num=0) #)\r\n        window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])  # , saveDir=annoDir)\r\n        window_EEG[window_key] = (window_data, window_label)\r\n    # window_N segments (by negative lookahead)\r\n    if t_N % t_overlap != 0:\r\n        t_start = (t_N - window_width) / edf_fS\r\n        t_end = t_N / edf_fS\r\n        window_key = \"window_%.3fs_%.3fs\" % (t_start, t_end)\r\n        window_data = makeArrayWindow(EEG_series[\"rawData\"], t0=i, tWindow=window_width)\r\n        window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])  # , saveDir=annoDir)\r\n        window_EEG[window_key] = (window_data, window_label)\r\n\r\n    return window_EEG\r\n\r\ndef plotWindow(EEG_series,label=\"null\", t_max=0, t_step=1):\r\n    edf_fS = EEG_series[\"rawData\"].info[\"sfreq\"]\r\n    t_N = int(t_max * edf_fS)\r\n    window_width = int(EEG_series[\"tWindow\"] * edf_fS)\r\n    label_path = EEG_series['path'].split(\".edf\")[0] + \".csv\"\r\n\r\n    for i in range(0, t_N - window_width, t_overlap):\r\n        t_start = i / edf_fS\r\n        t_end = (i + window_width) / edf_fS\r\n        window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])\r\n        if len(window_label)==1 & window_label[0]==label:\r\n            return EEG_series[\"rawData\"].plot(t_start=t_start, t_end=t_end)\r\n    return None\r\n\r\n# The function \"annotate_TUH()\" takes a raw signal and a path for a csv file with annotations/labels in it.\r\n# The annotations are read and added to the raw signal. The function is mainly made for the purpose of making\r\n# plots with the artifacts showing.\r\ndef annotate_TUH(raw,annoPath=False, header=None):\r\n    df = pd.read_csv(annoPath, sep=\",\", skiprows=6, header=header)\r\n    t_start=df[2].to_numpy()\r\n    dura=df[3].to_numpy()-t_start\r\n    labels=df[4].to_numpy().tolist()\r\n    chan_names=df[1].to_numpy().tolist()\r\n    t_start=t_start.tolist()\r\n    dura=dura.tolist()\r\n\r\n    delete=[]\r\n    low_char={'FP1':'Fp1', 'FP2':'Fp2', 'FZ':'Fz', 'CZ':'Cz', 'PZ':'Pz'}\r\n    for i in range(len(chan_names)):\r\n        #remove numbers behind channel names:\r\n        chan_names[i]=[chan_names[i][:-3],chan_names[i][-2:]]\r\n\r\n        # Loop through all channel names in reverse order, so if something is removed it does not affect other index.\r\n        # Change certain channels to have smaller letters:\r\n        for k in range(len(chan_names[i])-1,-1,-1):\r\n            if chan_names[i][k] in low_char:\r\n                chan_names[i][k]=low_char[chan_names[i][k]]\r\n\r\n            # If channel names are not in the raw info their are removed from an annotation:\r\n            if chan_names[i][k] not in raw.ch_names:\r\n                chan_names[i].remove(chan_names[i][k])\r\n\r\n        # If no channel names are left for an annotation its index is saved for later removal entirely:\r\n        # (It could potentially just be annotated for the whole signal)\r\n        if not chan_names[i]:\r\n            delete.append(i)\r\n\r\n\r\n    #removes every annotation that cannot be handled backwards:\r\n    for ele in sorted(delete,reverse=True):\r\n        print(f\"Annotation {labels[ele]} on non-existing channel {chan_names[ele]} removed from annotations.\")\r\n        del t_start[ele], dura[ele],labels[ele],chan_names[ele]\r\n\r\n    anno=mne.Annotations(onset=t_start,\r\n                            duration=dura,\r\n                              description=labels,\r\n                                ch_names=chan_names)\r\n\r\n    raw_anno=raw.set_annotations(anno)\r\n    return raw_anno\r\n\r\ndef spectrogramMake(MNE_window=None, freq = None, tWindow=100, crop_fq=45, FFToverlap=None, show_chan_num=None,chan_names=None):\r\n    try:\r\n        edfFs = freq\r\n        chWindows = MNE_window\r\n\r\n        if FFToverlap is None:\r\n            specOption = {\"x\": chWindows, \"fs\": edfFs, \"mode\": \"psd\"}\r\n        else:\r\n            window = signal.get_window(window=('tukey', 0.25), Nx=int(tWindow))  # TODO: error in 'Nx' & 'noverlap' proportions\r\n            specOption = {\"x\": chWindows, \"fs\": edfFs, \"window\": window, \"noverlap\": int(tWindow*FFToverlap), \"mode\": \"psd\"}\r\n\r\n        fAx, tAx, Sxx = signal.spectrogram(**specOption)\r\n        normSxx = stats.zscore(np.log(Sxx[:, fAx <= crop_fq, :] + 2**-52)) #np.finfo(float).eps))\r\n        if isinstance(show_chan_num, int):\r\n            plot_spec = plotSpec(ch_names=chan_names, chan=show_chan_num,\r\n                                 fAx=fAx[fAx <= crop_fq], tAx=tAx, Sxx=normSxx)\r\n            plot_spec.show()\r\n    except:\r\n        print(\"pause here\")\r\n        # fTemp, tTemp, SxxTemp = signal.spectrogram(chWindows[0], fs=edfFs)\r\n        # plt.pcolormesh(tTemp, fTemp, np.log(SxxTemp))\r\n        # plt.ylabel('Frequency [Hz]')\r\n        # plt.xlabel('Time [sec]')\r\n        # plt.title(\"channel spectrogram: \"+MNE_raw.ch_names[0])\r\n        # plt.ylim(0,45)\r\n        # plt.show()\r\n\r\n    return torch.tensor(normSxx.astype(np.float16)) # for np delete torch.tensor\r\n\r\ndef plotSpec(ch_names=False, chan=False, fAx=False, tAx=False, Sxx=False):\r\n    # fTemp, tTemp, SxxTemp = signal.spectrogram(chWindows[0], fs=edfFs)\r\n    # normSxx = stats.zscore(np.log(Sxx[:, fAx <= cropFq, :] + np.finfo(float).eps))\r\n    plt.pcolormesh(tAx, fAx, Sxx[chan, :, :])\r\n    plt.ylabel('Frequency [Hz]')\r\n    plt.xlabel('Time [sec]')\r\n    plt.title(\"channel spectrogram: \" + ch_names[chan])\r\n\r\n    return plt
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pipeline/loadFunctions.py b/pipeline/loadFunctions.py
--- a/pipeline/loadFunctions.py	(revision 167efa9e2047b47bcbea23aa2ca4063598b15b1d)
+++ b/pipeline/loadFunctions.py	(date 1650459857908)
@@ -119,7 +119,8 @@
             # Generate output windows for (X,y) as (array, label)
             proc_subject["preprocessing_output"] = slidingRawWindow(proc_subject,
                                                                     t_max=proc_subject["rawData"].times[-1],
-                                                                    tStep=proc_subject["tStep"])
+                                                                    tStep=proc_subject["tStep"],
+                                                                    electrodeCLF=True)
 
             for window in proc_subject["preprocessing_output"].values():
                 Xwindows.append(window[0])
@@ -224,26 +225,55 @@
     print(MNE_raw.info["ch_names"])
     return MNE_raw
 
-def label_TUH(annoPath=False, window=[0, 0], header=None):  # saveDir=os.getcwd(),
+def label_TUH(annoPath=False, window=[0, 0], header=None,channel=None):  # saveDir=os.getcwd(),
     df = pd.read_csv(annoPath, sep=",", skiprows=6, header=header)
     df.fillna('null', inplace=True)
     within_con0 = (df[2] <= window[0]) & (window[0] <= df[3])
     within_con1 = (df[2] <= window[1]) & (window[1] <= df[3])
-    label_TUH = df[df[2].between(window[0], window[1]) |
+    if channel:
+        chan_names = df[1].to_numpy().tolist()
+        low_char = {'FP1': 'Fp1', 'FP2': 'Fp2', 'FZ': 'Fz', 'CZ': 'Cz', 'PZ': 'Pz'}
+        for i in range(len(chan_names)):
+            # remove numbers behind channel names:
+            chan_names[i] = [chan_names[i][:-3], chan_names[i][-2:]]
+
+            # Loop through all channel names in reverse order, so if something is removed it does not affect other index.
+            # Change certain channels to have smaller letters:
+            for k in range(len(chan_names[i]) - 1, -1, -1):
+                if chan_names[i][k] in low_char:
+                    chan_names[i][k] = low_char[chan_names[i][k]]
+        label_TUH = df[(df[2].between(window[0], window[1]) |
+                       df[3].between(window[0], window[1]) |
+                       (within_con0 & within_con1))
+                       & (np.sum(np.asarray(chan_names)==np.asarray(channel),axis=1).tolist())
+                        & ((df[4].to_numpy()=='elec')|
+                           (df[4].to_numpy()=='musc_elec')|
+                           (df[4].to_numpy()=='eyem_elec')|
+                           (df[4].to_numpy()=='shiv_elec')|
+                           (df[4].to_numpy()=='chew_elec'))]
+    else:
+        label_TUH = df[df[2].between(window[0], window[1]) |
                    df[3].between(window[0], window[1]) |
                    (within_con0 & within_con1)]
     label_df = label_TUH.rename(columns={2: 't_start', 3: 't_end', 4: 'label', 5: 'confidence'})["label"]  # Renamer headers i pandas dataen
     return_list = label_df.to_numpy().tolist()  # Outputter kun listen af label navne i vinduet, fx ["eyem", "null"]
+    if return_list==[]:
+        return_list=['null']
+    elif channel:
+        return_list=['elec']
     return return_list
 
 
 def makeArrayWindow(MNE_raw=None, t0=0, tWindow=120):
     # take a raw signal and make a window given time specifications. Outputs an array, because of raw.get_data().
-    chWindows = MNE_raw.get_data(start=int(t0), stop=int(t0 + tWindow), reject_by_annotation="omit", picks=['eeg'])
+    chWindows = MNE_raw.get_data(start=int(t0), stop=int(t0 + tWindow), reject_by_annotation=None, picks=['eeg'])
     return chWindows
 
 
-def slidingRawWindow(EEG_series=None, t_max=0, tStep=1):
+def slidingRawWindow(EEG_series=None, t_max=0, tStep=1,electrodeCLF=False):
+    #If electrodeCLF is set to true, the function outputs a window per channel
+    # with labels assigned only for this channel.
+
     # catch correct sample frequency and end sample
     edf_fS = EEG_series["rawData"].info["sfreq"]
     t_N = int(t_max * edf_fS)
@@ -269,17 +299,28 @@
         t_end = (i + window_width) / edf_fS
         window_key = "window_%.3fs_%.3fs" % (t_start, t_end)
         window_data = makeArrayWindow(EEG_series["rawData"], t0=i, tWindow=window_width)  # , show_chan_num=0) #)
-        window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])  # , saveDir=annoDir)
-        window_EEG[window_key] = (window_data, window_label)
+        if electrodeCLF:
+            for i in range(len(window_data)):
+                chan=EEG_series['rawData'].info['ch_names'][i]
+                channel_label=label_TUH(annoPath=label_path, window=[t_start, t_end],channel=chan)
+                window_EEG[window_key+f"{i}"] = (window_data, channel_label)
+        else:
+            window_label = label_TUH(annoPath=label_path, window=[t_start, t_end],channel=None)  # , saveDir=annoDir)
+            window_EEG[window_key] = (window_data, window_label)
     # window_N segments (by negative lookahead)
     if t_N % t_overlap != 0:
         t_start = (t_N - window_width) / edf_fS
         t_end = t_N / edf_fS
         window_key = "window_%.3fs_%.3fs" % (t_start, t_end)
         window_data = makeArrayWindow(EEG_series["rawData"], t0=i, tWindow=window_width)
-        window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])  # , saveDir=annoDir)
-        window_EEG[window_key] = (window_data, window_label)
-
+        if electrodeCLF:
+            for i in range(len(window_data)):
+                chan=EEG_series['rawData'].info['ch_names'][i]
+                channel_label=label_TUH(annoPath=label_path, window=[t_start, t_end],channel=chan)
+                window_EEG[window_key+f"{i}"] = (window_data, channel_label)
+        else:
+            window_label = label_TUH(annoPath=label_path, window=[t_start, t_end])  # , saveDir=annoDir)
+            window_EEG[window_key] = (window_data, window_label)
     return window_EEG
 
 def plotWindow(EEG_series,label="null", t_max=0, t_step=1):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"681eb482-4823-466c-900b-a027fa28e27f\" name=\"Changes\" comment=\"montageTest\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dEEpG.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dEEpG.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pipeline/loadData.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pipeline/loadData.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pipeline/loadFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pipeline/loadFunctions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pipeline/preprocessFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pipeline/preprocessFunctions.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"25W0Gvvo5KunPrCnT8lbZPNy557\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"ToolWindowPython Packages.ShowToolbar\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/David\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\\David\" />\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\\Load\" />\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.loadData\">\r\n    <configuration name=\"BC_TUH_script\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/David\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/David/BC_TUH_script.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"LoadWithBraindecode\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/LoadWithBraindecode.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"inputScript\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/David\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/David/inputScript.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"loadData\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\marie\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/loadData.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"prepareData\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Fagprojekt\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\marie\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/prepareData.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.BC_TUH_script\" />\r\n      <item itemvalue=\"Python.inputScript\" />\r\n      <item itemvalue=\"Python.loadData\" />\r\n      <item itemvalue=\"Python.LoadWithBraindecode\" />\r\n      <item itemvalue=\"Python.prepareData\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.loadData\" />\r\n        <item itemvalue=\"Python.prepareData\" />\r\n        <item itemvalue=\"Python.LoadWithBraindecode\" />\r\n        <item itemvalue=\"Python.inputScript\" />\r\n        <item itemvalue=\"Python.BC_TUH_script\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"681eb482-4823-466c-900b-a027fa28e27f\" name=\"Changes\" comment=\"\" />\r\n      <created>1645627443933</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1645627443933</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1646210526672</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646210526672</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1646210602178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646210602178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647437747048</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647437747048</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647437877128</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647437877128</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647438156890</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647438156890</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647438377335</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647438377335</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Two temple data samples\">\r\n      <created>1647439137416</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647439137416</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"David EEG loader and prep implement\">\r\n      <created>1648046740264</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648046740264</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"David EEG loader and prep implement\">\r\n      <created>1648046786090</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648046786090</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Changing Davids preprocess code to make X and y arrays\">\r\n      <created>1648644139919</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648644139919</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Changing Davids preprocess code to make X and y arrays\">\r\n      <created>1648644460238</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648644460238</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Label_TUH fixed\">\r\n      <created>1648645553495</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648645553495</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Dataset of windows with labels\">\r\n      <created>1648648022245</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648648022245</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Code to load dataset as windows with labels\">\r\n      <created>1648727132055</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648727132056</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Preprocess modified\">\r\n      <created>1649241087409</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649241087410</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Preprocess modified\">\r\n      <created>1649246342681</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649246342681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Spectrogram maker works\">\r\n      <created>1649248703473</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649248703473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"montageTest\">\r\n      <created>1650014226240</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650014226240</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"19\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\" />\r\n    <MESSAGE value=\"Two temple data samples\" />\r\n    <MESSAGE value=\"David EEG loader and prep implement\" />\r\n    <MESSAGE value=\"Changing Davids preprocess code to make X and y arrays\" />\r\n    <MESSAGE value=\"Label_TUH fixed\" />\r\n    <MESSAGE value=\"Dataset of windows with labels\" />\r\n    <MESSAGE value=\"Code to load dataset as windows with labels\" />\r\n    <MESSAGE value=\"Preprocess modified\" />\r\n    <MESSAGE value=\"Spectrogram maker works\" />\r\n    <MESSAGE value=\"montageTest\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"montageTest\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/prepareData.py</url>\r\n          <line>243</line>\r\n          <option name=\"timeStamp\" value=\"28\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/preprocessing.py</url>\r\n          <line>2</line>\r\n          <option name=\"timeStamp\" value=\"50\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/prepareData.py</url>\r\n          <line>235</line>\r\n          <option name=\"timeStamp\" value=\"53\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/prepareData.py</url>\r\n          <line>242</line>\r\n          <option name=\"timeStamp\" value=\"59\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/prepareData.py</url>\r\n          <line>241</line>\r\n          <option name=\"timeStamp\" value=\"60\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/prepareData.py</url>\r\n          <line>209</line>\r\n          <option name=\"timeStamp\" value=\"67\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/loadData.py</url>\r\n          <line>28</line>\r\n          <option name=\"timeStamp\" value=\"71\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/loadData.py</url>\r\n          <line>22</line>\r\n          <option name=\"timeStamp\" value=\"72\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/clfs.py</url>\r\n          <line>33</line>\r\n          <option name=\"timeStamp\" value=\"105\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/clfs.py</url>\r\n          <line>54</line>\r\n          <option name=\"timeStamp\" value=\"106\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 167efa9e2047b47bcbea23aa2ca4063598b15b1d)
+++ b/.idea/workspace.xml	(date 1650459857990)
@@ -4,13 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="681eb482-4823-466c-900b-a027fa28e27f" name="Changes" comment="montageTest">
-      <change beforePath="$PROJECT_DIR$/.idea/dEEpG.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dEEpG.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="681eb482-4823-466c-900b-a027fa28e27f" name="Changes" comment="MontageTest">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pipeline/loadData.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/loadData.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pipeline/loadFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/loadFunctions.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pipeline/preprocessFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/preprocessFunctions.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,7 +21,7 @@
     </option>
   </component>
   <component name="Git.Merge.Settings">
-    <option name="BRANCH" value="origin/main" />
+    <option name="BRANCH" value="origin/prepate_data" />
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -356,7 +352,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/prepareData.py</url>
-          <line>235</line>
+          <line>241</line>
           <option name="timeStamp" value="53" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
@@ -366,12 +362,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/prepareData.py</url>
-          <line>241</line>
-          <option name="timeStamp" value="60" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/prepareData.py</url>
-          <line>209</line>
+          <line>217</line>
           <option name="timeStamp" value="67" />
         </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
@@ -393,6 +384,11 @@
           <url>file://$PROJECT_DIR$/pipeline/clfs.py</url>
           <line>54</line>
           <option name="timeStamp" value="106" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/loadFunctions.py</url>
+          <line>244</line>
+          <option name="timeStamp" value="110" />
         </line-breakpoint>
       </breakpoints>
       <default-breakpoints>
