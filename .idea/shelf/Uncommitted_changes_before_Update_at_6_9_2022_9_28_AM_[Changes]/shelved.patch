Index: pipeline/pipelineMain.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from loadFunctions import TUH_data\r\n#from braindecode.datasets import create_from_X_y\r\nfrom clfs import electrodeCLF\r\nimport pickle\r\nfrom cvFunctions import splitDataset\r\nfrom datetime import datetime\r\nfrom os.path import exists\r\nimport os\r\nimport json\r\nimport pandas as pd\r\nfrom multiprocessing import freeze_support,set_start_method\r\nfrom statFunctions import sessionStat\r\n\r\nif __name__ == '__main__':\r\n    set_start_method(\"spawn\")\r\n    freeze_support()\r\n\r\n    # Define path of outer directory for samples:\r\n    path=\"TUHdata\"\r\n\r\n    # Create class for data and find all edf files in path, and save in EEG_dict:\r\n    TUH=TUH_data(path=path)\r\n\r\n    deletePickle=False\r\n    if exists(\"TUH_EEG_dict.pkl\") and deletePickle:\r\n        os.remove(\"TUH_EEG_dict.pkl\")\r\n    if exists(\"index_patient_df.pkl\") and deletePickle:\r\n        os.remove(\"index_patient_df.pkl\")\r\n\r\n    if exists(\"TUH_EEG_dict.pkl\"):\r\n        saved_dict=open(\"TUH_EEG_dict.pkl\",\"rb\")\r\n        TUH.EEG_dict=pickle.load(saved_dict)\r\n        TUH.index_patient_df=pd.read_pickle(\"index_patient_df.pkl\")\r\n        print(\"Preprocessed data loaded succesfully\")\r\n\r\n    else:\r\n        # Load edf to raw, simple preprocessing, make Xwindows (all windows as arrays) and\r\n        # Ywindows (labels as list of strings) to use for electrode artifact classifier:\r\n        windowssz = 10\r\n        TUH.parallelElectrodeCLFPrep(tWindow=windowssz, tStep=windowssz * .25, plot=False) #Problems with the plots\r\n\r\n        save_dict=open(\"TUH_EEG_dict.pkl\",\"wb\")\r\n        pickle.dump(TUH.EEG_dict,save_dict)\r\n        save_dict.close()\r\n        TUH.index_patient_df.to_pickle(\"index_patient_df.pkl\")\r\n        print(\"Preprocessed data saved succesfully\")\r\n\r\n    #sessionStat(EEG_dict=TUH.EEG_dict)\r\n\"\"\"\r\nelecX,elecY,windowInfo=TUH.makeDatasetFromIds(ids=[0])\r\n\r\n# Save class instance to pickle for later loading\r\n#pickle.dump(TUH)\r\n\r\nXtrain, Xtest, ytrain, ytest = splitDataset(TUH.index_patient_df, ratio=0.2, shuffle=True)\r\n\r\n# Find the best electrode artifact classifier:\r\nbestmodel=electrodeCLF(elecX, elecY, \"all\", False)\r\n\r\n#bads=classifyElectrodeIntervals(elecX,windowInfo,bestmodel)\r\n\r\n\r\n# Load edf to raw, full preprocess with electrode classifier, make Xwindows (all windows\r\n# as arrays) and Ywindows (labels as list of strings) to use for data augmentation.\r\nTUH.prep(tWindow=100, tStep=100 * .25,plot=True)\r\n\r\n# Make Braindecode windows dataset from Xwindows and Ywindows:\r\nwindows_dataset = create_from_X_y(\r\n    TUH.Xwindows, TUH.Ywindows, drop_last_window=False, sfreq=TUH.sfreq, ch_names=TUH.ch_names,\r\n    window_stride_samples=len(TUH.Xwindows[0][0]),\r\n    window_size_samples=len(TUH.Xwindows[0][0]),\r\n)\r\n\r\nwindows_dataset.description\r\n\"\"\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pipeline/pipelineMain.py b/pipeline/pipelineMain.py
--- a/pipeline/pipelineMain.py	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/pipeline/pipelineMain.py	(date 1654759039683)
@@ -10,18 +10,20 @@
 import pandas as pd
 from multiprocessing import freeze_support,set_start_method
 from statFunctions import sessionStat
+import threading
+
 
 if __name__ == '__main__':
     set_start_method("spawn")
     freeze_support()
 
     # Define path of outer directory for samples:
-    path="TUHdata"
+    path="..\TUH_data_sample"
 
     # Create class for data and find all edf files in path, and save in EEG_dict:
     TUH=TUH_data(path=path)
 
-    deletePickle=False
+    deletePickle=True
     if exists("TUH_EEG_dict.pkl") and deletePickle:
         os.remove("TUH_EEG_dict.pkl")
     if exists("index_patient_df.pkl") and deletePickle:
@@ -37,7 +39,8 @@
         # Load edf to raw, simple preprocessing, make Xwindows (all windows as arrays) and
         # Ywindows (labels as list of strings) to use for electrode artifact classifier:
         windowssz = 10
-        TUH.parallelElectrodeCLFPrep(tWindow=windowssz, tStep=windowssz * .25, plot=False) #Problems with the plots
+        TUH.electrodeCLFPrep(tWindow=windowssz, tStep=windowssz * .25)
+        #TUH.parallelElectrodeCLFPrepVer2(tWindow=windowssz, tStep=windowssz * .25)
 
         save_dict=open("TUH_EEG_dict.pkl","wb")
         pickle.dump(TUH.EEG_dict,save_dict)
Index: pipeline/labelFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\n#from tqdm import *\r\nfrom collections import defaultdict\r\nimport mne\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\n\r\ndef label_TUH(dataFrame=False, window=[0, 0], header=None,channel=None):  # saveDir=os.getcwd(),\r\n    df=dataFrame\r\n    within_con0 = (pd.to_numeric(df['t_start']) <= window[0]) & (window[0] <= pd.to_numeric(df['t_end']))\r\n    within_con1 = (pd.to_numeric(df['t_start']) <= window[1]) & (window[1] <= pd.to_numeric(df['t_end']))\r\n\r\n    if channel:\r\n        chan_names = df['channel'].to_numpy().tolist()\r\n        low_char = {'FP1': 'Fp1', 'FP2': 'Fp2', 'FZ': 'Fz', 'CZ': 'Cz', 'PZ': 'Pz'}\r\n        for i in range(len(chan_names)):\r\n            # remove numbers behind channel names:\r\n            chan_names[i] = [chan_names[i][:-3], chan_names[i][-2:]]\r\n\r\n            # Loop through all channel names in reverse order, so if something is removed it does not affect other index.\r\n            # Change certain channels to have smaller letters:\r\n            for k in range(len(chan_names[i]) - 1, -1, -1):\r\n                if chan_names[i][k] in low_char:\r\n                    chan_names[i][k] = low_char[chan_names[i][k]]\r\n\r\n        label_TUH = df[(pd.to_numeric(df['t_start']).between(window[0], window[1]) |\r\n                       pd.to_numeric(df['t_end']).between(window[0], window[1]) |\r\n                       (within_con0 & within_con1))\r\n                       & (np.sum(np.asarray(chan_names)==np.asarray(channel),axis=1).tolist())\r\n                        & (df['label'].to_numpy()=='elec')]\r\n                        #Handle double labels in the solveLabelChannelRelations function, so only keeping\r\n                        # these in case we would like other checks.\r\n                        # |(df['label'].to_numpy()=='musc_elec')|(df['label'].to_numpy()=='eyem_elec')|\r\n                          # (df['label'].to_numpy()=='shiv_elec')|(df['label'].to_numpy()=='chew_elec'))]\r\n    else:\r\n        label_TUH = df[df['t_start'].between(window[0], window[1]) |\r\n                   df['t_end'].between(window[0], window[1]) |\r\n                   (within_con0 & within_con1)]\r\n    return_list = label_TUH.to_numpy().tolist()  # Outputter kun listen af label navne i vinduet, fx [\"eyem\", \"null\"]\r\n    if return_list==[]:\r\n        return_list=['null']\r\n    elif channel:\r\n        return_list=['elec']\r\n    return return_list\r\n\r\n\r\n# The function \"annotate_TUH()\" takes a raw signal and a anntot for a csv file with annotations/labels in it.\r\n# The annotations are read and added to the raw signal. The function is mainly made for the purpose of making\r\n# plots with the artifacts showing.\r\ndef annotate_TUH(raw,df=None):\r\n    t_start=df['t_start'].to_numpy().astype(float)\r\n    dura=df['t_end'].to_numpy().astype(float)-t_start\r\n    labels=df['label'].to_numpy().tolist()\r\n    chan_names=df['channel'].to_numpy().tolist()\r\n    t_start=t_start.tolist()\r\n    dura=dura.tolist()\r\n\r\n    delete=[]\r\n    low_char={'FP1':'Fp1', 'FP2':'Fp2', 'FZ':'Fz', 'CZ':'Cz', 'PZ':'Pz'}\r\n    for i in range(len(chan_names)):\r\n        # Loop through all channel names in reverse order, so if something is removed it does not affect other index.\r\n        # Change certain channels to have smaller letters:\r\n        if chan_names[i] in low_char:\r\n            chan_names[i]=low_char[chan_names[i]]\r\n\r\n        # If channel names are not in the raw info their are removed from an annotation:\r\n        if chan_names[i] not in raw.ch_names:\r\n            delete.append(i)\r\n\r\n\r\n    #removes every annotation that cannot be handled backwards:\r\n    for ele in sorted(delete,reverse=True):\r\n        print(f\"Annotation {labels[ele]} on non-existing channel {chan_names[ele]} removed from annotations.\")\r\n        del t_start[ele], dura[ele],labels[ele],chan_names[ele]\r\n\r\n    chan_names=[[ch] for ch in chan_names]\r\n\r\n    anno=mne.Annotations(onset=t_start,\r\n                            duration=dura,\r\n                              description=labels,\r\n                                ch_names=chan_names)\r\n\r\n    raw_anno=raw.set_annotations(anno)\r\n    return raw_anno\r\n\r\n\r\ndef solveLabelChannelRelation(annoPath, header = None, plot=False):\r\n    print(f\"Annotation: {annoPath}\")\r\n    df = pd.read_csv(annoPath, sep=\",\", skiprows=6, header=header)\r\n    if len(df.columns)==5:\r\n        # first row in this setup is just the column names so, first column is removed:\r\n        df = df.drop(index=0)\r\n    else:\r\n        #if this setup (6 columns), the first column contains file names, that we don't care about\r\n        df = df.drop(0,axis=1)\r\n    df.columns = ['channel', 'start_time', 'stop_time', 'label', 'confidence']\r\n\r\n    # Find all double labels eg. \"eyem_elec\" and split them to two seperate annotations:\r\n    double_label_temp_df=pd.DataFrame(columns=['channel', 'start_time', 'stop_time', 'label'])\r\n    double_labels=df[df['label'].str.len()==9]\r\n    if not double_labels.empty:\r\n        for i in double_labels.index:\r\n            label1,label2=df['label'][i].split('_')\r\n\r\n            rows_two_labels = pd.DataFrame({'channel': [df['channel'][i],df['channel'][i]], 'start_time': [df['start_time'][i],df['start_time'][i]],\r\n                                             'stop_time': [df['stop_time'][i],df['stop_time'][i]], 'label': [label1, label2]})\r\n\r\n\r\n            double_label_temp_df = pd.concat([double_label_temp_df, rows_two_labels], ignore_index=True)\r\n\r\n            df = df.drop(index=i)\r\n        #Join the df with removed doublelabels with the dataframe with the separated single annotations:\r\n        df=pd.concat([df, rows_two_labels], ignore_index=True)\r\n\r\n    #Creating data frame:\r\n    anno_df=pd.DataFrame(columns=['channel','t_start','t_end','label'])\r\n\r\n    if plot:\r\n        # Should we drop the NaN values?\r\n        plotmat = np.zeros((len(df), int(round(df['stop_time'].max()*256,0))))\r\n\r\n        for i in range(len(df)):\r\n            plotmat[i, int(round(df['start_time'][i] * 256, 0)):int(round(df['stop_time'][i] * 256, 0))] = 1\r\n\r\n    #checking every entry in label data:\r\n    for i in df.index:\r\n        chan1, chan2=df['channel'][i].split('-')\r\n        # Only check row against rows further down:\r\n        temp = df[i+1:]\r\n        # Only rows with same label:\r\n        temp = temp[temp['label'] == df['label'][i]]\r\n\r\n        # Only overlap in time:\r\n        temp_time = temp[((df['start_time'][i]<=temp['start_time']) & (temp['start_time']<=df['stop_time'][i])) |\r\n                         ((df['start_time'][i]<=temp['stop_time']) & (temp['stop_time']<=df['stop_time'][i])) |\r\n                         ((temp['start_time']<df['start_time'][i]) & (df['stop_time'][i]<temp['stop_time']))]\r\n\r\n        for k in temp_time.index:\r\n            #check if first channel is a match with one in the new channel pair:\r\n\r\n            channel = None\r\n            if chan1 in temp_time['channel'][k].split('-'):\r\n                channel = chan1\r\n            elif chan2 in temp_time['channel'][k].split('-'):\r\n                channel = chan2\r\n            if channel in [chan1, chan2]:\r\n                t_start = max(df['start_time'][i], temp_time['start_time'][k])\r\n                t_end = min(df['stop_time'][i], temp_time['stop_time'][k])\r\n\r\n                #Find all entries in the new annotation dataframe where there is a match of label and found channel (two\r\n                # first checks). Then check that there is an overlap in time (three checks of overlap: start time within\r\n                # interval, end time within interval or comparison signal k is larger and lies around the signal i.)\r\n                duplicates=anno_df[ ((df['label'][i]==anno_df['label']) &\r\n                         (channel==anno_df['channel'])  &\r\n                        (((t_start<=anno_df['t_start']) & (anno_df['t_start']<=t_end)) |\r\n                         ((t_start<=anno_df['t_end']) & (anno_df['t_end']<=t_end)) |\r\n                         ((anno_df['t_start']<t_start) & (t_end<anno_df['t_end']))))]\r\n\r\n                if not duplicates.empty:\r\n                    new_t_start = min(duplicates['t_start'].to_numpy().tolist()+[t_start])\r\n                    new_t_end = max(duplicates['t_end'].to_numpy().tolist()+[t_start])\r\n\r\n                    #delete overlapping rows from behind so the indexes are not confused:\r\n                    for n in range(len(duplicates)):\r\n                        index=duplicates.index[-n]\r\n                        anno_df=anno_df.drop(index=index)\r\n\r\n                    #Wait to concatenate new row to dataframe, since the indexes are ignored, meaning the duplicates\r\n                    # get different indexes and cannot be removed unless this order is used.\r\n                    anno_new = pd.DataFrame({'channel': [channel], 't_start': [new_t_start],\r\n                                             't_end': [new_t_end], 'label': [df['label'][i]]})\r\n                    if plot:\r\n                        # Heatmap matrix\r\n                        plotmat[i, int(round(anno_new['t_start'] * 256, 0)):int(round(anno_new['t_end'] * 256, 0))] = 2\r\n                        plotmat[k, int(round(anno_new['t_start'] * 256, 0)):int(round(anno_new['t_end'] * 256, 0))] = 2\r\n                    anno_df = pd.concat([anno_df, anno_new], ignore_index=True)\r\n                # if no duplicates/overlaps found, then just save annotation for channel:\r\n                else:\r\n                    anno_new = pd.DataFrame({'channel': [channel], 't_start': [t_start],\r\n                                             't_end': [t_end], 'label': [df['label'][i]]})\r\n                    if plot:\r\n                        plotmat[i, int(round(anno_new['t_start'] * 256, 0)):int(round(anno_new['t_end'] * 256, 0))] = 2\r\n                        plotmat[k, int(round(anno_new['t_start'] * 256, 0)):int(round(anno_new['t_end'] * 256, 0))] = 2\r\n                    anno_df = pd.concat([anno_df,anno_new],ignore_index=True)\r\n\r\n            else:\r\n                #print(\"Annotation was not appended since channel was not a match\")\r\n                pass\r\n\r\n    if plot:\r\n        sns.heatmap(plotmat)\r\n        plt.show()\r\n\r\n    print(anno_df)\r\n    return anno_df\r\n\r\ndef labelChannels(annoPath, header = None):\r\n    df = pd.read_csv(annoPath, sep=\",\", skiprows=6, header=header)\r\n\r\n    # Split pairs into single channels\r\n    channel_pairs = df[1].to_numpy().tolist()\r\n    channel_pairs = [n.split('-') for n in channel_pairs]\r\n\r\n    # Creating data frame:\r\n    anno_df = pd.DataFrame(columns=['channel', 't_start', 't_end', 'label'])\r\n\r\n    anno_dict = defaultdict(lambda: (0, 0))\r\n\r\n    # Checking every entry in label data:\r\n    for i in range(len(channel_pairs)):\r\n        # Check if label is the same in the two rows, eg. 'elec'=='elec':\r\n        # Create two variables, one for each channel in the pair:\r\n        chan1, chan2 = channel_pairs[i]\r\n        for k in range(i+1,len(channel_pairs)):\r\n            #Check if label is the same in the two rows, eg. 'elec'=='elec':\r\n            if df[4][i] == df[4][k]:\r\n                #Add both time frames to anno_dict\r\n               anno_dict[chan1] = (df[2][i], df[3][i])\r\n               anno_dict[chan2] = (df[2][i], df[3][i])\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    path = \"../TUH_data_sample/131/00013103/s001_2015_09_30/00013103_s001_t000.csv\"\r\n\r\n    solveLabelChannelRelation(annoPath=path, header=None, plot=True)\r\n\r\n    #labelChannels(annoPath=path)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pipeline/labelFunctions.py b/pipeline/labelFunctions.py
--- a/pipeline/labelFunctions.py	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/pipeline/labelFunctions.py	(date 1654759609007)
@@ -14,15 +14,10 @@
     if channel:
         chan_names = df['channel'].to_numpy().tolist()
         low_char = {'FP1': 'Fp1', 'FP2': 'Fp2', 'FZ': 'Fz', 'CZ': 'Cz', 'PZ': 'Pz'}
+        #If channel name is in dictionary, name is changed to small end character.
         for i in range(len(chan_names)):
-            # remove numbers behind channel names:
-            chan_names[i] = [chan_names[i][:-3], chan_names[i][-2:]]
-
-            # Loop through all channel names in reverse order, so if something is removed it does not affect other index.
-            # Change certain channels to have smaller letters:
-            for k in range(len(chan_names[i]) - 1, -1, -1):
-                if chan_names[i][k] in low_char:
-                    chan_names[i][k] = low_char[chan_names[i][k]]
+            if chan_names[i] in low_char.keys():
+                chan_names[i] = low_char[chan_names[i]]
 
         label_TUH = df[(pd.to_numeric(df['t_start']).between(window[0], window[1]) |
                        pd.to_numeric(df['t_end']).between(window[0], window[1]) |
Index: pipeline/loadFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os, mne, time, re\r\nfrom mne.io import read_raw_edf\r\nfrom collections import defaultdict\r\nfrom datetime import datetime, timezone\r\nimport pandas as pd\r\nimport numpy as np\r\nimport torch\r\nfrom preprocessFunctions import simplePreprocess, rereference, preprocessRaw\r\nimport matplotlib.pyplot as plt\r\nfrom scipy import signal, stats\r\n#from raw_utils import oneHotEncoder\r\nfrom tqdm import *\r\nfrom labelFunctions import label_TUH, annotate_TUH, solveLabelChannelRelation\r\nimport matplotlib.pyplot as plt\r\nimport multiprocessing\r\nfrom itertools import repeat\r\n\r\n#plt.rcParams[\"font.family\"] = \"Times New Roman\"\r\n\r\n##These functions are either inspired from or modified copies of code written by David Nyrnberg:\r\n# https://github.com/DavidEnslevNyrnberg/DTU_DL_EEG/tree/0bfd1a9349f60f44e6f7df5aa6820434e44263a2/Transfer%20learning%20project\r\n\r\nclass Gaussian:\r\n    def plot(mean, std, lower_bound=None, upper_bound=None, resolution=None,\r\n             title=None, x_label=None, y_label=None, legend_label=None, legend_location=\"best\"):\r\n        lower_bound = (mean - 4 * std) if lower_bound is None else lower_bound\r\n        upper_bound = (mean + 4 * std) if upper_bound is None else upper_bound\r\n        resolution = 100\r\n\r\n        title = title or \"Gaussian Distribution\"\r\n        x_label = x_label or \"x\"\r\n        y_label = y_label or \"N(x|μ,σ)\"\r\n        legend_label = legend_label or \"μ={}, σ={}\".format(mean, std)\r\n\r\n        X = np.linspace(lower_bound, upper_bound, resolution)\r\n        dist_X = Gaussian._distribution(X, mean, std)\r\n\r\n        plt.title(title)\r\n\r\n        plt.plot(X, dist_X, label=legend_label)\r\n\r\n        plt.xlabel(x_label)\r\n        plt.ylabel(y_label)\r\n        plt.legend(loc=legend_location)\r\n\r\n        return plt\r\n\r\n    def _distribution(X, mean, std):\r\n        return 1. / (np.sqrt(2 * np.pi) * std) * np.exp(-0.5 * (1. / std * (X - mean)) ** 2)\r\n\r\nclass TUH_data:\r\n    def __init__(self, path):\r\n        ### Makes dictionary of all edf files\r\n        EEG_count = 0\r\n        EEG_dict = {}\r\n        index_patient_df = pd.DataFrame(columns=['index', 'patient_id', 'window_count', 'elec_count'])\r\n        for dirpath, dirnames, filenames in os.walk(path):\r\n            for filename in [f for f in filenames if f.endswith(\".edf\")]:\r\n                \"\"\"For every edf file found somewhere in the directory, it is assumed the folders hold the structure: \r\n                \".../id/patientId/sessionId/edfFile\".\r\n                Therefore the path is split backwards and the EEG_dict updated with the found ids/paths.\r\n                Furthermore it is expected that a csv file will always be found in the directory.\"\"\"\r\n                session_path_split = os.path.split(dirpath)\r\n                patient_path_split = os.path.split(session_path_split[0])\r\n                id_path_split = os.path.split(patient_path_split[0])\r\n                EEG_dict.update({EEG_count: {\"id\": id_path_split[1],\r\n                                             \"patient_id\": patient_path_split[1],\r\n                                             \"session\": session_path_split[1],\r\n                                             \"path\": os.path.join(dirpath, filename),\r\n                                             \"csvpath\": os.path.join(dirpath, os.path.splitext(filename)[0]+'.csv')}})\r\n                new_index_patient = pd.DataFrame({'index': EEG_count,'patient_id': EEG_dict[EEG_count][\"patient_id\"], 'window_count' : 0, 'elec_count' : 0}, index = [EEG_count])\r\n                index_patient_df=pd.concat([index_patient_df, new_index_patient])\r\n                EEG_count += 1\r\n        self.index_patient_df = index_patient_df\r\n        self.EEG_dict = EEG_dict\r\n        self.EEG_count = EEG_count\r\n\r\n    def readRawEdf(self, edfDict=None, tWindow=120, tStep=30,\r\n                   read_raw_edf_param={'preload': True, \"stim_channel\": \"auto\"}):\r\n        try:\r\n            edfDict[\"rawData\"] = read_raw_edf(edfDict[\"path\"], **read_raw_edf_param)\r\n            edfDict[\"fS\"] = edfDict[\"rawData\"].info[\"sfreq\"]\r\n            t_start = edfDict[\"rawData\"].annotations.orig_time\r\n            if t_start.timestamp() <= 0:\r\n                edfDict[\"t0\"] = datetime.fromtimestamp(0, tz=timezone.utc)\r\n                t_last = edfDict[\"t0\"].timestamp() + edfDict[\"rawData\"]._last_time + 1 / edfDict[\"fS\"]\r\n                edfDict[\"tN\"] = datetime.fromtimestamp(t_last, tz=timezone.utc)\r\n            else:\r\n                t_last = t_start.timestamp() + edfDict[\"rawData\"]._last_time + 1 / edfDict[\"fS\"]\r\n                edfDict[\"t0\"] = t_start  # datetime.fromtimestamp(t_start.timestamp(), tz=timezone.utc)\r\n                edfDict[\"tN\"] = datetime.fromtimestamp(t_last, tz=timezone.utc)\r\n\r\n            edfDict[\"tWindow\"] = float(tWindow)  # width of EEG sample window, given in (sec)\r\n            edfDict[\"tStep\"] = float(tStep)  # step/overlap between EEG sample windows, given in (sec)\r\n\r\n        except:\r\n            print(\"error break please inspect:\\n %s\\n~~~~~~~~~~~~\" % edfDict[\"rawData\"].filenames[0])\r\n\r\n        return edfDict\r\n\r\n    def electrodeCLFPrep(self, tWindow=100, tStep=100 *.25,plot=False):\r\n        tic = time.time()\r\n        for k in tqdm(range(len(self.EEG_dict))):\r\n\r\n            annotations=solveLabelChannelRelation(self.EEG_dict[k]['csvpath'])\r\n\r\n            self.EEG_dict[k] = self.readRawEdf(self.EEG_dict[k], tWindow=tWindow, tStep=tStep,\r\n                                           read_raw_edf_param={'preload': True})\r\n\r\n            self.EEG_dict[k][\"rawData\"] = TUH_rename_ch(self.EEG_dict[k][\"rawData\"])\r\n            TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',\r\n                        'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed\r\n            self.EEG_dict[k][\"rawData\"].pick_channels(ch_names=TUH_pick)\r\n            self.EEG_dict[k][\"rawData\"].reorder_channels(TUH_pick)\r\n\r\n            if k == 0 and plot:\r\n                #Plot the energy voltage potential against frequency.\r\n                self.EEG_dict[k][\"rawData\"].plot_psd(tmax=np.inf, fmax=125, average=True)\r\n\r\n                raw_anno = annotate_TUH(self.EEG_dict[k][\"rawData\"],df=annotations)\r\n                raw_anno.plot()\r\n                plt.title(\"Untouched raw signal\")\r\n                plt.show()\r\n                plt.savefig('Untouched_raw_signal.png')\r\n\r\n            simplePreprocess(self.EEG_dict[k][\"rawData\"], cap_setup=\"standard_1005\", lpfq=1, hpfq=100, notchfq=60,\r\n                     downSam=250)\r\n\r\n            if k == 0:\r\n                self.sfreq = self.EEG_dict[k][\"rawData\"].info[\"sfreq\"]\r\n                self.ch_names = self.EEG_dict[k][\"rawData\"].info[\"ch_names\"]\r\n                if plot:\r\n                    self.EEG_dict[k][\"rawData\"].plot_psd(tmax=np.inf, fmax=125, average=True)\r\n\r\n                    raw_anno = annotate_TUH(self.EEG_dict[k][\"rawData\"], df=annotations)\r\n                    raw_anno.plot()\r\n                    plt.title(\"Raw signal after simple preprocessing\")\r\n                    plt.show()\r\n                    plt.savefig('Raw_signal_post_processing.png')\r\n\r\n\r\n            # Generate output windows for (X,y) as (array, label)\r\n            self.EEG_dict[k][\"labeled_windows\"], self.index_patient_df[\"window_count\"][k], self.index_patient_df[\"elec_count\"][k] = slidingRawWindow(self.EEG_dict[k],\r\n                                                                    t_max=self.EEG_dict[k][\"rawData\"].times[-1],\r\n                                                                    tStep=self.EEG_dict[k][\"tStep\"],\r\n                                                                    electrodeCLF=True,df=annotations)\r\n\r\n        toc = time.time()\r\n        print(\"\\n~~~~~~~~~~~~~~~~~~~~\\n\"\r\n              \"it took %imin:%is to run electrode classifier preprocess-pipeline for %i file(s)\\nwith window length [%.2fs] and t_step [%.2fs]\"\r\n              \"\\n~~~~~~~~~~~~~~~~~~~~\\n\" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),\r\n                                            tWindow, tStep))\r\n        print(self.index_patient_df)\r\n\r\n        #Plot window and elec count\r\n\r\n        if plot:\r\n            x = self.index_patient_df['patient_id'].tolist()\r\n            y1 = self.index_patient_df['elec_count'].tolist()\r\n            y2 = self.index_patient_df['window_count'].tolist()\r\n            try:\r\n                y2_m = list()\r\n                for item1, item2 in zip(y2, y1):\r\n                    y2_m.append(item1 - item2)\r\n            except:\r\n                y2_m = [0]\r\n                print(\"Number of recorded counts for elec and windows dosen't match in dataframe\")\r\n\r\n            plt.bar(x, y1,0.6, color='r')\r\n            plt.bar(x, y2_m,0.6, bottom=y1, color='b')\r\n            plt.show()\r\n            plt.savefig(\"window_and_elec_count.png\")\r\n\r\n            #Gaussian distribution of elec and window count\r\n            plot = Gaussian(np.mean(y1), np.std(y1))\r\n            plot = Gaussian(np.mean(y2), np.std(y2))\r\n            plt.show()\r\n\r\n    def parallelElectrodeCLFPrep(self, tWindow=100, tStep=100 *.25,plot=False):\r\n        tic = time.time()\r\n        manager=multiprocessing.Manager()\r\n        queue=manager.Queue()\r\n        args = [(k, tWindow, tStep, plot, queue) for k in range(len(self.EEG_dict))]\r\n\r\n        with multiprocessing.get_context(\"spawn\").Pool() as pool:\r\n            pool.starmap(self.parallelPrep,args)\r\n\r\n        for k in range(len(self.EEG_dict)):\r\n            result=queue.get()\r\n            self.EEG_dict[k]=result[0]\r\n            self.index_patient_df[\"window_count\"][k] = result[1]\r\n            self.index_patient_df[\"elec_count\"][k] = result[2]\r\n\r\n        toc = time.time()\r\n        print(\"\\n~~~~~~~~~~~~~~~~~~~~\\n\"\r\n              \"it took %imin:%is to run electrode classifier preprocess-pipeline for %i file(s)\\nwith window length [%.2fs] and t_step [%.2fs]\"\r\n              \"\\n~~~~~~~~~~~~~~~~~~~~\\n\" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),\r\n                                            tWindow, tStep))\r\n\r\n    def parallelPrep(self,k,tWindow=100, tStep=100 *.25,plot=False,queue=None):\r\n        print(f\"Initializing prep of file {k}.\")\r\n        annotations = solveLabelChannelRelation(self.EEG_dict[k]['csvpath'])\r\n\r\n        self.EEG_dict[k] = self.readRawEdf(self.EEG_dict[k], tWindow=tWindow, tStep=tStep,\r\n                                           read_raw_edf_param={'preload': True})\r\n\r\n        self.EEG_dict[k][\"rawData\"] = TUH_rename_ch(self.EEG_dict[k][\"rawData\"])\r\n        TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',\r\n                    'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed\r\n        self.EEG_dict[k][\"rawData\"].pick_channels(ch_names=TUH_pick)\r\n        self.EEG_dict[k][\"rawData\"].reorder_channels(TUH_pick)\r\n\r\n        simplePreprocess(self.EEG_dict[k][\"rawData\"], cap_setup=\"standard_1005\", lpfq=1, hpfq=100, notchfq=60,\r\n                         downSam=250)\r\n\r\n        # Generate output windows for (X,y) as (array, label)\r\n        self.EEG_dict[k][\"labeled_windows\"], self.index_patient_df[\"window_count\"][k],\\\r\n        self.index_patient_df[\"elec_count\"][k] = slidingRawWindow(self.EEG_dict[k],\r\n                                                                  t_max=self.EEG_dict[k][\"rawData\"].times[-1],\r\n                                                                  tStep=self.EEG_dict[k][\"tStep\"],\r\n                                                                  electrodeCLF=True, df=annotations)\r\n\r\n        queue.put((self.EEG_dict[k],self.index_patient_df[\"window_count\"][k],self.index_patient_df[\"elec_count\"][k]))\r\n\r\n        print(f\"Finished prep of file {k}.\")\r\n\r\n\r\n\r\n\r\n    def collectWindows(self,id=None):\r\n        # Helper funtion to makeDatasetFromIds\r\n        # Collects all windows from one session into list\r\n        Xwindows = []\r\n        Ywindows = []\r\n        windowInfo = []\r\n        for window in self.EEG_dict[id][\"labeled_windows\"].values():\r\n            Xwindows=Xwindows+[window[0]]\r\n            if window[1] == ['elec']:\r\n                Ywindows.append([1])\r\n            else:\r\n                Ywindows.append([0])\r\n            #Ywindows.append(1 if window[1]==['elec'] else 0)\r\n            # save info about which raw file and start time and end time this window is.\r\n            windowInfo.append([{'patient_id':self.EEG_dict[id]['patient_id'], 't_start':window[2], 't_end':window[3]}])\r\n\r\n        return Xwindows,Ywindows,windowInfo\r\n\r\n\r\n    def makeDatasetFromIds(self,ids=None):\r\n        # Needs list of Ids/indexes in EEG_dict. Function electrodeCLFPrep should be called beforehand.\r\n        # Collects all windows of all given ids into one list of X (window data) and Y corresponding labels\r\n        Xwindows = []\r\n        Ywindows = []\r\n        windowInfo = []\r\n        for id in ids:\r\n            Xwind,Ywind,windowIn=self.collectWindows(id=id)\r\n            Xwindows.append(Xwind)\r\n            Ywindows.append(Ywind)\r\n            windowInfo.append(windowIn)\r\n\r\n        return Xwindows,Ywindows,windowInfo\r\n\r\n    def specMaker(self):\r\n        Xwindows=self.Xwindows\r\n        Freq = self.sfreq\r\n        tWindow=self.tWindow\r\n        tStep=self.tStep\r\n        overlap=(tWindow-tStep)/tWindow #The amount of the window that overlaps with the next window.\r\n\r\n        for k in range(len(Xwindows)):\r\n            spectrogramMake(Xwindows[k], Freq,FFToverlap=overlap,tWindow=tWindow, show_chan_num=1,chan_names=self.ch_names)\r\n\r\n# renames TUH channels to conventional 10-20 system\r\ndef TUH_rename_ch(MNE_raw=False):\r\n    # MNE_raw\r\n    # mne.channels.rename_channels(MNE_raw.info, {\"PHOTIC-REF\": \"PROTIC\"})\r\n    for i in MNE_raw.info[\"ch_names\"]:\r\n        reSTR = r\"(?<=EEG )(\\S*)(?=-REF)\"  # working reSTR = r\"(?<=EEG )(.*)(?=-REF)\"\r\n        reSTR2 = r\"(?<=EEG )(\\S*)(?=-LE)\"  # working reSTR = r\"(?<=EEG )(.*)(?=-LE)\"\r\n        reLowC = ['FP1', 'FP2', 'FZ', 'CZ', 'PZ']\r\n\r\n        if re.search(reSTR, i) and re.search(reSTR, i).group() in reLowC:\r\n            lowC = i[0:5]+i[5].lower()+i[6:]\r\n            mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR, lowC)[0]})\r\n        elif i == \"PHOTIC-REF\":\r\n            mne.channels.rename_channels(MNE_raw.info, {i: \"PHOTIC\"})\r\n        elif re.search(reSTR, i):\r\n            mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR, i)[0]})\r\n\r\n        elif re.search(reSTR2, i) and re.search(reSTR2, i).group() in reLowC:\r\n            lowC = i[0:5]+i[5].lower()+i[6:]\r\n            mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR2, lowC)[0]})\r\n        elif i == \"PHOTIC-LE\":\r\n            mne.channels.rename_channels(MNE_raw.info, {i: \"PHOTIC\"})\r\n        elif re.search(reSTR2, i):\r\n                mne.channels.rename_channels(MNE_raw.info, {i: re.findall(reSTR2, i)[0]})\r\n        elif re.search(\"PHOTIC\", i):\r\n            mne.channels.rename_channels(MNE_raw.info, {i: \"PHOTIC\"})\r\n        else:\r\n            print(\"No match for %s\" % i)\r\n            continue\r\n            # print(i)\r\n    print(MNE_raw.info[\"ch_names\"])\r\n    return MNE_raw\r\n\r\n\r\ndef makeArrayWindow(MNE_raw=None, t0=0, tWindow=120):\r\n    # take a raw signal and make a window given time specifications. Outputs an array, because of raw.get_data().\r\n    chWindows = MNE_raw.get_data(start=int(t0), stop=int(t0 + tWindow), reject_by_annotation=None, picks=['eeg'])\r\n    return chWindows\r\n\r\n\r\ndef slidingRawWindow(EEG_series=None, t_max=0, tStep=1,electrodeCLF=False, df=False):\r\n    #If electrodeCLF is set to true, the function outputs a window per channel\r\n    # with labels assigned only for this channel.\r\n\r\n    window_count = 0\r\n    elec_count = 0\r\n    # catch correct sample frequency and end sample\r\n    edf_fS = EEG_series[\"rawData\"].info[\"sfreq\"]\r\n    t_N = int(t_max * edf_fS)\r\n\r\n    # ensure window-overlaps progress in sample interger\r\n    if float(tStep * edf_fS) == float(int(tStep * edf_fS)):\r\n        t_overlap = int(tStep * edf_fS)\r\n    else:\r\n        t_overlap = int(tStep * edf_fS)\r\n        overlap_change = 100 - (t_overlap / edf_fS) * 100\r\n        print(\"\\n  tStep [%.3f], overlap does not equal an interger [%f] and have been rounded to %i\"\r\n              \"\\n  equaling to %.1f%% overlap or %.3fs time steps\\n\\n\"\r\n              % (tStep, tStep * edf_fS, t_overlap, overlap_change, t_overlap / edf_fS))\r\n\r\n    # initialize variables for segments\r\n    window_EEG = defaultdict(tuple)\r\n    window_width = int(EEG_series[\"tWindow\"] * edf_fS)\r\n\r\n    # segment all N-1 windows (by positive lookahead)\r\n    for i in range(0, t_N - window_width, t_overlap):\r\n        t_start = i / edf_fS\r\n        t_end = (i + window_width) / edf_fS\r\n        window_key = \"window_%.3fs_%.3fs\" % (t_start, t_end)\r\n        window_data = makeArrayWindow(EEG_series[\"rawData\"], t0=i, tWindow=window_width)  # , show_chan_num=0) #)\r\n        if electrodeCLF:\r\n            for i in range(len(window_data)):\r\n                chan=EEG_series['rawData'].info['ch_names'][i]\r\n                channel_label=label_TUH(dataFrame=df, window=[t_start, t_end],channel=chan)\r\n                if 'elec' in channel_label:\r\n                    elec_count += 1\r\n                    window_count += 1\r\n                else:\r\n                    window_count += 1\r\n                oneHotChan=(np.asarray(EEG_series['rawData'].info['ch_names'])==chan)*1\r\n                window_EEG[window_key+f\"{i}\"] = (np.concatenate((oneHotChan,window_data[i])), channel_label,t_start,t_end)\r\n        else:\r\n            window_label = label_TUH(dataFrame=df, window=[t_start, t_end],channel=None)  # , saveDir=annoDir)\r\n            window_EEG[window_key] = (window_data, window_label)\r\n    # window_N segments (by negative lookahead)\r\n    if t_N % t_overlap != 0:\r\n        t_start = (t_N - window_width) / edf_fS\r\n        t_end = t_N / edf_fS\r\n        window_key = \"window_%.3fs_%.3fs\" % (t_start, t_end)\r\n        window_data = makeArrayWindow(EEG_series[\"rawData\"], t0=i, tWindow=window_width)\r\n        if electrodeCLF:\r\n            for i in range(len(window_data)):\r\n                chan=EEG_series['rawData'].info['ch_names'][i]\r\n                channel_label=label_TUH(dataFrame=df, window=[t_start, t_end],channel=chan)\r\n                if 'elec' in channel_label:\r\n                    elec_count += 1\r\n                    window_count += 1\r\n                else:\r\n                    window_count += 1\r\n                oneHotChan=(np.asarray(EEG_series['rawData'].info['ch_names'])==chan)*1\r\n                window_EEG[window_key+f\"{i}\"] = (np.concatenate((oneHotChan,window_data[i])), channel_label,t_start,t_end)\r\n        else:\r\n            window_label = label_TUH(dataFrame=df, window=[t_start, t_end])  # , saveDir=annoDir)\r\n            window_EEG[window_key] = (window_data, window_label)\r\n    return window_EEG, window_count, elec_count\r\n\r\ndef plotWindow(EEG_series,label=\"null\", t_max=0, t_step=1):\r\n    edf_fS = EEG_series[\"rawData\"].info[\"sfreq\"]\r\n    t_N = int(t_max * edf_fS)\r\n    window_width = int(EEG_series[\"tWindow\"] * edf_fS)\r\n\r\n    for i in range(0, t_N - window_width, t_step):\r\n        t_start = i / edf_fS\r\n        t_end = (i + window_width) / edf_fS\r\n        window_label = label_TUH(dataFrame=df, window=[t_start, t_end])\r\n        if len(window_label)==1 & window_label[0]==label:\r\n            return EEG_series[\"rawData\"].plot(t_start=t_start, t_end=t_end)\r\n    return None\r\n\r\ndef spectrogramMake(MNE_window=None, freq = None, tWindow=100, crop_fq=45, FFToverlap=None, show_chan_num=None,chan_names=None):\r\n    try:\r\n        edfFs = freq\r\n        chWindows = MNE_window\r\n\r\n        if FFToverlap is None:\r\n            specOption = {\"x\": chWindows, \"fs\": edfFs, \"mode\": \"psd\"}\r\n        else:\r\n            window = signal.get_window(window=('tukey', 0.25), Nx=int(tWindow))  # TODO: error in 'Nx' & 'noverlap' proportions\r\n            specOption = {\"x\": chWindows, \"fs\": edfFs, \"window\": window, \"noverlap\": int(tWindow*FFToverlap), \"mode\": \"psd\"}\r\n\r\n        fAx, tAx, Sxx = signal.spectrogram(**specOption)\r\n        normSxx = stats.zscore(np.log(Sxx[:, fAx <= crop_fq, :] + 2**-52)) #np.finfo(float).eps))\r\n        if isinstance(show_chan_num, int):\r\n            plot_spec = plotSpec(ch_names=chan_names, chan=show_chan_num,\r\n                                 fAx=fAx[fAx <= crop_fq], tAx=tAx, Sxx=normSxx)\r\n            plot_spec.show()\r\n    except:\r\n        print(\"pause here\")\r\n        # fTemp, tTemp, SxxTemp = signal.spectrogram(chWindows[0], fs=edfFs)\r\n        # plt.pcolormesh(tTemp, fTemp, np.log(SxxTemp))\r\n        # plt.ylabel('Frequency [Hz]')\r\n        # plt.xlabel('Time [sec]')\r\n        # plt.title(\"channel spectrogram: \"+MNE_raw.ch_names[0])\r\n        # plt.ylim(0,45)\r\n        # plt.show()\r\n\r\n    return torch.tensor(normSxx.astype(np.float16)) # for np delete torch.tensor\r\n\r\ndef plotSpec(ch_names=False, chan=False, fAx=False, tAx=False, Sxx=False):\r\n    # fTemp, tTemp, SxxTemp = signal.spectrogram(chWindows[0], fs=edfFs)\r\n    # normSxx = stats.zscore(np.log(Sxx[:, fAx <= cropFq, :] + np.finfo(float).eps))\r\n    plt.pcolormesh(tAx, fAx, Sxx[chan, :, :])\r\n    plt.ylabel('Frequency [Hz]')\r\n    plt.xlabel('Time [sec]')\r\n    plt.title(\"channel spectrogram: \" + ch_names[chan])\r\n\r\n    return plt\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pipeline/loadFunctions.py b/pipeline/loadFunctions.py
--- a/pipeline/loadFunctions.py	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/pipeline/loadFunctions.py	(date 1654725943775)
@@ -197,7 +197,29 @@
               "\n~~~~~~~~~~~~~~~~~~~~\n" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),
                                             tWindow, tStep))
 
-    def parallelPrep(self,k,tWindow=100, tStep=100 *.25,plot=False,queue=None):
+    def parallelElectrodeCLFPrep(self, tWindow=100, tStep=100 *.25):
+        tic = time.time()
+        manager=multiprocessing.Manager()
+        queue=manager.Queue()
+        args = [(k, tWindow, tStep, queue) for k in range(len(self.EEG_dict))]
+
+        with multiprocessing.get_context("spawn").Pool() as pool:
+            pool.starmap(self.parallelPrep,args)
+
+        for k in range(len(self.EEG_dict)):
+            result=queue.get()
+            self.EEG_dict[k]=result[0]
+            self.index_patient_df["window_count"][k] = result[1]
+            self.index_patient_df["elec_count"][k] = result[2]
+
+        toc = time.time()
+        print("\n~~~~~~~~~~~~~~~~~~~~\n"
+              "it took %imin:%is to run electrode classifier preprocess-pipeline for %i file(s)\nwith window length [%.2fs] and t_step [%.2fs]"
+              "\n~~~~~~~~~~~~~~~~~~~~\n" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),
+                                            tWindow, tStep))
+
+
+    def parallelPrep(self,k,tWindow=100, tStep=100 *.25,queue=None):
         print(f"Initializing prep of file {k}.")
         annotations = solveLabelChannelRelation(self.EEG_dict[k]['csvpath'])
 
@@ -224,8 +246,131 @@
 
         print(f"Finished prep of file {k}.")
 
+    def parallelElectrodeCLFPrepVer2(self, tWindow=100, tStep=100 *.25):
+        tic = time.time()
+        manager=multiprocessing.Manager()
+        queue=manager.Queue()
+        args = [(k, tWindow, tStep, queue) for k in range(len(self.EEG_dict))]
+        with multiprocessing.Pool() as pool:
+            results=pool.starmap(self.parallelPrepVer2,args)
+
+        if len(results)==len(self.EEG_dict):
+            for k in range(len(results)):
+                self.EEG_dict[k] = results[k][0]
+                self.index_patient_df["window_count"][k] = results[k][1]
+                self.index_patient_df["elec_count"][k] = results[k][2]
+
+        else:
+            print("Something went wrong, results does not match EEG_dict length.")
+
+        toc = time.time()
+        print("\n~~~~~~~~~~~~~~~~~~~~\n"
+              "it took %imin:%is to run electrode classifier preprocess-pipeline for %i file(s)\nwith window length [%.2fs] and t_step [%.2fs]"
+              "\n~~~~~~~~~~~~~~~~~~~~\n" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),
+                                            tWindow, tStep))
+
+    def parallelPrepVer2(self,k,tWindow=100, tStep=100 *.25,queue=None):
+        print(f"Initializing prep of file {k} with path {self.EEG_dict[k]['path']}.")
+        annotations = solveLabelChannelRelation(self.EEG_dict[k]['csvpath'])
+
+        self.EEG_dict[k] = self.readRawEdf(self.EEG_dict[k], tWindow=tWindow, tStep=tStep,
+                                           read_raw_edf_param={'preload': True})
+
+        self.EEG_dict[k]["rawData"] = TUH_rename_ch(self.EEG_dict[k]["rawData"])
+        TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',
+                    'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed
+        self.EEG_dict[k]["rawData"].pick_channels(ch_names=TUH_pick)
+        self.EEG_dict[k]["rawData"].reorder_channels(TUH_pick)
+
+        simplePreprocess(self.EEG_dict[k]["rawData"], cap_setup="standard_1005", lpfq=1, hpfq=100, notchfq=60,
+                         downSam=250)
+
+        # Generate output windows for (X,y) as (array, label)
+        self.EEG_dict[k]["labeled_windows"], self.index_patient_df["window_count"][k],\
+        self.index_patient_df["elec_count"][k] = slidingRawWindow(self.EEG_dict[k],
+                                                                  t_max=self.EEG_dict[k]["rawData"].times[-1],
+                                                                  tStep=self.EEG_dict[k]["tStep"],
+                                                                  electrodeCLF=True, df=annotations)
+        print(f"Finished prep of file {k}.")
+
+        return (self.EEG_dict[k],self.index_patient_df["window_count"][k],self.index_patient_df["elec_count"][k])
+
+
+    def parallelElectrodeCLFPrepVer3(self, tWindow=100, tStep=100 *.25):
+        tic = time.time()
+
+        tasks_to_do = multiprocessing.Queue()
+        results = multiprocessing.Queue()
+        processes=[]
+
+        for k in range(len(self.EEG_dict)):
+            tasks_to_do.put(k)
+
+        for w in range(multiprocessing.cpu_count()):
+            p=multiprocessing.Process(target=self.doParallelJob,args=(tasks_to_do,tWindow,tStep,results))
+            processes.append(p)
+            p.start()
+
+        for p in processes:
+            p.join()
+
+        k=0
+        while not results.empty():
+            result=results.get()
+            self.EEG_dict[k] = result[0]
+            self.index_patient_df["window_count"][k] = result[1]
+            self.index_patient_df["elec_count"][k] = result[2]
+            k+=1
+
+        toc = time.time()
+        print("\n~~~~~~~~~~~~~~~~~~~~\n"
+              "it took %imin:%is to run electrode classifier preprocess-pipeline for %i file(s)\nwith window length [%.2fs] and t_step [%.2fs]"
+              "\n~~~~~~~~~~~~~~~~~~~~\n" % (int((toc - tic) / 60), int((toc - tic) % 60), len(self.EEG_dict),
+                                            tWindow, tStep))
+
+    def doParallelJob(self,tasks_to_do,tWindow=100, tStep=100 *.25,results=None):
+        while True:
+            try:
+                k = tasks_to_do.get_nowait()
+
+
+            except queue.Empty:
+                break
+            else:
+                #Run preprocessing on this file:
+                result=self.parallelPrepVer3(k,tWindow,tStep)
+                #if no exception has been raised, add the result to results queue
+                print(f"Task no. {k} is done.")
+                results.put(result)
+                time.sleep(.5)
+        return True
+
+    def parallelPrepVer3(self,k,tWindow=100, tStep=100 *.25):
+
+        print(f"Initializing prep of file {k}.")
+        annotations = solveLabelChannelRelation(self.EEG_dict[k]['csvpath'])
+
+        self.EEG_dict[k] = self.readRawEdf(self.EEG_dict[k], tWindow=tWindow, tStep=tStep,
+                                           read_raw_edf_param={'preload': True})
+
+        self.EEG_dict[k]["rawData"] = TUH_rename_ch(self.EEG_dict[k]["rawData"])
+        TUH_pick = ['Fp1', 'Fp2', 'F3', 'F4', 'C3', 'C4', 'P3', 'P4', 'O1', 'O2',
+                    'F7', 'F8', 'T3', 'T4', 'T5', 'T6', 'Cz']  # A1, A2 removed
+        self.EEG_dict[k]["rawData"].pick_channels(ch_names=TUH_pick)
+        self.EEG_dict[k]["rawData"].reorder_channels(TUH_pick)
 
+        simplePreprocess(self.EEG_dict[k]["rawData"], cap_setup="standard_1005", lpfq=1, hpfq=100, notchfq=60,
+                         downSam=250)
 
+        # Generate output windows for (X,y) as (array, label)
+        self.EEG_dict[k]["labeled_windows"], self.index_patient_df["window_count"][k],\
+        self.index_patient_df["elec_count"][k] = slidingRawWindow(self.EEG_dict[k],
+                                                                  t_max=self.EEG_dict[k]["rawData"].times[-1],
+                                                                  tStep=self.EEG_dict[k]["tStep"],
+                                                                  electrodeCLF=True, df=annotations)
+        print(f"Finished prep of file {k}.")
+
+        return (self.EEG_dict[k],self.index_patient_df["window_count"][k],self.index_patient_df["elec_count"][k])
 
     def collectWindows(self,id=None):
         # Helper funtion to makeDatasetFromIds
Index: .idea/dEEpG.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dEEpG.iml b/.idea/dEEpG.iml
--- a/.idea/dEEpG.iml	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/.idea/dEEpG.iml	(date 1654679634428)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"681eb482-4823-466c-900b-a027fa28e27f\" name=\"Changes\" comment=\"update new CV-functions with new accuracy meassures\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pipeline/clfs.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pipeline/clfs.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pipeline/loadFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pipeline/loadFunctions.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"25W0Gvvo5KunPrCnT8lbZPNy557\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"exceleditor.install\" value=\"true\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\\David\" />\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\\Load\" />\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/scripts\" />\r\n      <recent name=\"C:\\Users\\marie\\PycharmProjects\\dEEpG\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.clfs\">\r\n    <configuration name=\"clfs\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/clfs.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"labelFunctions\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/labelFunctions.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"pipelineMain\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\marie\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/pipelineMain.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"pipeline_main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/pipeline_main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"plot_tuh_eeg_corpus\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"dEEpG\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/pipeline\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/pipeline/plot_tuh_eeg_corpus.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.pipelineMain\" />\r\n      <item itemvalue=\"Python.pipeline_main\" />\r\n      <item itemvalue=\"Python.plot_tuh_eeg_corpus\" />\r\n      <item itemvalue=\"Python.labelFunctions\" />\r\n      <item itemvalue=\"Python.clfs\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.clfs\" />\r\n        <item itemvalue=\"Python.pipeline_main\" />\r\n        <item itemvalue=\"Python.plot_tuh_eeg_corpus\" />\r\n        <item itemvalue=\"Python.pipelineMain\" />\r\n        <item itemvalue=\"Python.labelFunctions\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"681eb482-4823-466c-900b-a027fa28e27f\" name=\"Changes\" comment=\"\" />\r\n      <created>1645627443933</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1645627443933</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1646210526672</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646210526672</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1646210602178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1646210602178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647437747048</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647437747048</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647437877128</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647437877128</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647438156890</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647438156890</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData\">\r\n      <created>1647438377335</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647438377335</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Two temple data samples\">\r\n      <created>1647439137416</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647439137416</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"David EEG loader and prep implement\">\r\n      <created>1648046740264</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648046740264</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"David EEG loader and prep implement\">\r\n      <created>1648046786090</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648046786090</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Changing Davids preprocess code to make X and y arrays\">\r\n      <created>1648644139919</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648644139919</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Changing Davids preprocess code to make X and y arrays\">\r\n      <created>1648644460238</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648644460238</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Label_TUH fixed\">\r\n      <created>1648645553495</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648645553495</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Dataset of windows with labels\">\r\n      <created>1648648022245</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648648022245</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Code to load dataset as windows with labels\">\r\n      <created>1648727132055</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648727132056</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Preprocess modified\">\r\n      <created>1649241087409</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649241087410</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Preprocess modified\">\r\n      <created>1649246342681</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649246342681</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Spectrogram maker works\">\r\n      <created>1649248703473</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1649248703473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"montageTest\">\r\n      <created>1650014226240</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650014226240</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"electrode prep, sliding window changed\">\r\n      <created>1650460611799</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650460611799</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"classify electrode intervals created\">\r\n      <created>1650466865406</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650466865406</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"classify electrode intervals created\">\r\n      <created>1650467513148</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650467513148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"classify electrode intervals created\">\r\n      <created>1650467527269</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1650467527269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Changes by marie\">\r\n      <created>1651070204417</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651070204428</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"label magi\">\r\n      <created>1651070227075</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651070227075</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Changes by marie\">\r\n      <created>1651071331043</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651071331044</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"label magi updates\">\r\n      <created>1651071386111</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651071386111</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"shelves patches\">\r\n      <created>1651071397942</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651071397942</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Changes by marie\">\r\n      <created>1651071407671</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651071407671</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"shelves patches\">\r\n      <created>1651517674886</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651517674887</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Changes to solveLabelChannelRelation, splitting of double labels etc.\">\r\n      <created>1651651173991</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651651173991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"split functions between loadFunction.py and new labelFunctions.py\">\r\n      <created>1651651491638</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651651491638</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"change structure to have raw and windows in EEG_dict and two functions for handling of this\">\r\n      <created>1651676545606</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651676545606</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"pandas df patient id index overview\">\r\n      <created>1651679080652</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1651679080652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"spring cleaning\">\r\n      <created>1654170241105</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654170241105</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"spring cleaning 2.0\">\r\n      <created>1654170749780</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654170749780</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"rename of Cv.py\">\r\n      <created>1654248246566</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654248246566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"custom splitDataset function added\">\r\n      <created>1654253923094</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654253923095</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"check for saved TUH instance added\">\r\n      <created>1654253946314</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654253946314</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"save class instance\">\r\n      <created>1654253962410</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654253962410</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\".xml updates\">\r\n      <created>1654253981937</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654253981937</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"evaluation.py was created\">\r\n      <created>1654262724021</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654262724022</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"added data split by patient id to main\">\r\n      <created>1654265636036</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654265636036</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00043\" summary=\"bug fixes\">\r\n      <created>1654265646716</created>\r\n      <option name=\"number\" value=\"00043\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654265646716</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00044\" summary=\"unversioned files\">\r\n      <created>1654265663487</created>\r\n      <option name=\"number\" value=\"00044\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654265663487</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00045\" summary=\"counter update for windows and elec + measurres for classification\">\r\n      <created>1654523993861</created>\r\n      <option name=\"number\" value=\"00045\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654523993868</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"plot for count fo windows and elec\">\r\n      <created>1654600426775</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654600426777</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"update new CV-functions with new accuracy meassures\">\r\n      <created>1654674735462</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1654674735463</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"48\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n        <entry key=\"bc83aafe-54b4-44c4-943b-ca299a6a98fe\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"HEAD\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"montageTest\" />\r\n    <MESSAGE value=\"electrode prep, sliding window changed\" />\r\n    <MESSAGE value=\"classify electrode intervals created\" />\r\n    <MESSAGE value=\"label magi\" />\r\n    <MESSAGE value=\"label magi updates\" />\r\n    <MESSAGE value=\"Changes by marie\" />\r\n    <MESSAGE value=\"shelves patches\" />\r\n    <MESSAGE value=\"Changes to solveLabelChannelRelation, splitting of double labels etc.\" />\r\n    <MESSAGE value=\"split functions between loadFunction.py and new labelFunctions.py\" />\r\n    <MESSAGE value=\"change structure to have raw and windows in EEG_dict and two functions for handling of this\" />\r\n    <MESSAGE value=\"pandas df patient id index overview\" />\r\n    <MESSAGE value=\"spring cleaning\" />\r\n    <MESSAGE value=\"spring cleaning 2.0\" />\r\n    <MESSAGE value=\"rename of Cv.py\" />\r\n    <MESSAGE value=\"custom splitDataset function added\" />\r\n    <MESSAGE value=\"check for saved TUH instance added\" />\r\n    <MESSAGE value=\"save class instance\" />\r\n    <MESSAGE value=\".xml updates\" />\r\n    <MESSAGE value=\"evaluation.py was created\" />\r\n    <MESSAGE value=\"added data split by patient id to main\" />\r\n    <MESSAGE value=\"bug fixes\" />\r\n    <MESSAGE value=\"unversioned files\" />\r\n    <MESSAGE value=\"counter update for windows and elec + measurres for classification\" />\r\n    <MESSAGE value=\"plot for count fo windows and elec\" />\r\n    <MESSAGE value=\"update new CV-functions with new accuracy meassures\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"update new CV-functions with new accuracy meassures\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>\r\n          <line>65</line>\r\n          <option name=\"timeStamp\" value=\"71\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>\r\n          <line>59</line>\r\n          <option name=\"timeStamp\" value=\"72\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>\r\n          <line>48</line>\r\n          <option name=\"timeStamp\" value=\"138\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>\r\n          <line>118</line>\r\n          <option name=\"timeStamp\" value=\"139\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>\r\n          <line>128</line>\r\n          <option name=\"timeStamp\" value=\"140\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>\r\n          <line>120</line>\r\n          <option name=\"timeStamp\" value=\"141\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>\r\n          <line>110</line>\r\n          <option name=\"timeStamp\" value=\"142\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>\r\n          <line>108</line>\r\n          <option name=\"timeStamp\" value=\"143\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/.idea/workspace.xml	(date 1654759621463)
@@ -4,10 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="681eb482-4823-466c-900b-a027fa28e27f" name="Changes" comment="update new CV-functions with new accuracy meassures">
+    <list default="true" id="681eb482-4823-466c-900b-a027fa28e27f" name="Changes" comment="Trying to make multiprocessing work by queue. Still fails on the hpc after approx 150 files.">
+      <change beforePath="$PROJECT_DIR$/.idea/dEEpG.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dEEpG.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pipeline/clfs.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/clfs.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pipeline/labelFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/labelFunctions.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/pipeline/loadFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/loadFunctions.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pipeline/pipelineMain.py" beforeDir="false" afterPath="$PROJECT_DIR$/pipeline/pipelineMain.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -46,22 +49,25 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="exceleditor.install" value="true" />
-    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
-  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/marie/PycharmProjects/FagprojektEEG/pipeline&quot;
+  }
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\marie\PycharmProjects\FagprojektEEG\pipeline" />
       <recent name="C:\Users\marie\PycharmProjects\dEEpG\David" />
       <recent name="C:\Users\marie\PycharmProjects\dEEpG\Load" />
       <recent name="C:\Users\marie\PycharmProjects\dEEpG" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\marie\PycharmProjects\FagprojektEEG" />
       <recent name="$PROJECT_DIR$/scripts" />
       <recent name="C:\Users\marie\PycharmProjects\dEEpG" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.clfs">
+  <component name="RunManager" selected="Python.pipelineMain">
     <configuration name="clfs" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="dEEpG" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -83,7 +89,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="labelFunctions" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="pipelineMain" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="dEEpG" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -95,7 +101,7 @@
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/pipeline/labelFunctions.py" />
+      <option name="SCRIPT_NAME" value="C:\Users\marie\PycharmProjects\FagprojektEEG\pipeline\pipelineMain.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -171,16 +177,14 @@
       <item itemvalue="Python.pipelineMain" />
       <item itemvalue="Python.pipeline_main" />
       <item itemvalue="Python.plot_tuh_eeg_corpus" />
-      <item itemvalue="Python.labelFunctions" />
       <item itemvalue="Python.clfs" />
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.pipelineMain" />
         <item itemvalue="Python.clfs" />
         <item itemvalue="Python.pipeline_main" />
         <item itemvalue="Python.plot_tuh_eeg_corpus" />
-        <item itemvalue="Python.pipelineMain" />
-        <item itemvalue="Python.labelFunctions" />
       </list>
     </recent_temporary>
   </component>
@@ -192,111 +196,6 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1645627443933</updated>
-    </task>
-    <task id="LOCAL-00001" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1646210526672</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1646210526672</updated>
-    </task>
-    <task id="LOCAL-00002" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1646210602178</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1646210602178</updated>
-    </task>
-    <task id="LOCAL-00003" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1647437747048</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1647437747048</updated>
-    </task>
-    <task id="LOCAL-00004" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1647437877128</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1647437877128</updated>
-    </task>
-    <task id="LOCAL-00005" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1647438156890</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1647438156890</updated>
-    </task>
-    <task id="LOCAL-00006" summary="loadData script and preprocessing from david Nyrnberg. Script to use functions called prepareData">
-      <created>1647438377335</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1647438377335</updated>
-    </task>
-    <task id="LOCAL-00007" summary="Two temple data samples">
-      <created>1647439137416</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1647439137416</updated>
-    </task>
-    <task id="LOCAL-00008" summary="David EEG loader and prep implement">
-      <created>1648046740264</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1648046740264</updated>
-    </task>
-    <task id="LOCAL-00009" summary="David EEG loader and prep implement">
-      <created>1648046786090</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1648046786090</updated>
-    </task>
-    <task id="LOCAL-00010" summary="Changing Davids preprocess code to make X and y arrays">
-      <created>1648644139919</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1648644139919</updated>
-    </task>
-    <task id="LOCAL-00011" summary="Changing Davids preprocess code to make X and y arrays">
-      <created>1648644460238</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1648644460238</updated>
-    </task>
-    <task id="LOCAL-00012" summary="Label_TUH fixed">
-      <created>1648645553495</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1648645553495</updated>
-    </task>
-    <task id="LOCAL-00013" summary="Dataset of windows with labels">
-      <created>1648648022245</created>
-      <option name="number" value="00013" />
-      <option name="presentableId" value="LOCAL-00013" />
-      <option name="project" value="LOCAL" />
-      <updated>1648648022245</updated>
-    </task>
-    <task id="LOCAL-00014" summary="Code to load dataset as windows with labels">
-      <created>1648727132055</created>
-      <option name="number" value="00014" />
-      <option name="presentableId" value="LOCAL-00014" />
-      <option name="project" value="LOCAL" />
-      <updated>1648727132056</updated>
-    </task>
-    <task id="LOCAL-00015" summary="Preprocess modified">
-      <created>1649241087409</created>
-      <option name="number" value="00015" />
-      <option name="presentableId" value="LOCAL-00015" />
-      <option name="project" value="LOCAL" />
-      <updated>1649241087410</updated>
     </task>
     <task id="LOCAL-00016" summary="Preprocess modified">
       <created>1649246342681</created>
@@ -501,28 +400,147 @@
       <option name="project" value="LOCAL" />
       <updated>1654265663487</updated>
     </task>
-    <task id="LOCAL-00045" summary="counter update for windows and elec + measurres for classification">
-      <created>1654523993861</created>
+    <task id="LOCAL-00045" summary="Comments and small fix to annotation algorithm">
+      <created>1654506329822</created>
       <option name="number" value="00045" />
       <option name="presentableId" value="LOCAL-00045" />
       <option name="project" value="LOCAL" />
-      <updated>1654523993868</updated>
+      <updated>1654506329822</updated>
     </task>
-    <task id="LOCAL-00046" summary="plot for count fo windows and elec">
-      <created>1654600426775</created>
+    <task id="LOCAL-00046" summary="Comments and small fix to annotation algorithm">
+      <created>1654506359782</created>
       <option name="number" value="00046" />
       <option name="presentableId" value="LOCAL-00046" />
       <option name="project" value="LOCAL" />
-      <updated>1654600426777</updated>
+      <updated>1654506359782</updated>
     </task>
-    <task id="LOCAL-00047" summary="update new CV-functions with new accuracy meassures">
-      <created>1654674735462</created>
+    <task id="LOCAL-00047" summary="requirements file made">
+      <created>1654509313537</created>
       <option name="number" value="00047" />
       <option name="presentableId" value="LOCAL-00047" />
       <option name="project" value="LOCAL" />
-      <updated>1654674735463</updated>
+      <updated>1654509313537</updated>
+    </task>
+    <task id="LOCAL-00048" summary="requirements file made">
+      <created>1654510463961</created>
+      <option name="number" value="00048" />
+      <option name="presentableId" value="LOCAL-00048" />
+      <option name="project" value="LOCAL" />
+      <updated>1654510463961</updated>
+    </task>
+    <task id="LOCAL-00049" summary="extra data files">
+      <created>1654510715716</created>
+      <option name="number" value="00049" />
+      <option name="presentableId" value="LOCAL-00049" />
+      <option name="project" value="LOCAL" />
+      <updated>1654510715716</updated>
+    </task>
+    <task id="LOCAL-00050" summary="Fix of solveLabelChannelRelation() to  work for both types of csv setups">
+      <created>1654519520744</created>
+      <option name="number" value="00050" />
+      <option name="presentableId" value="LOCAL-00050" />
+      <option name="project" value="LOCAL" />
+      <updated>1654519520744</updated>
+    </task>
+    <task id="LOCAL-00051" summary="extra data files">
+      <created>1654519705274</created>
+      <option name="number" value="00051" />
+      <option name="presentableId" value="LOCAL-00051" />
+      <option name="project" value="LOCAL" />
+      <updated>1654519705274</updated>
+    </task>
+    <task id="LOCAL-00052" summary="extra data files">
+      <created>1654519726901</created>
+      <option name="number" value="00052" />
+      <option name="presentableId" value="LOCAL-00052" />
+      <option name="project" value="LOCAL" />
+      <updated>1654519726901</updated>
+    </task>
+    <task id="LOCAL-00053" summary="extra data files">
+      <created>1654519771835</created>
+      <option name="number" value="00053" />
+      <option name="presentableId" value="LOCAL-00053" />
+      <option name="project" value="LOCAL" />
+      <updated>1654519771835</updated>
+    </task>
+    <task id="LOCAL-00054" summary="xml file change">
+      <created>1654520793277</created>
+      <option name="number" value="00054" />
+      <option name="presentableId" value="LOCAL-00054" />
+      <option name="project" value="LOCAL" />
+      <updated>1654520793277</updated>
+    </task>
+    <task id="LOCAL-00055" summary="PipelineMain save pickles of EEG_dict and index_df">
+      <created>1654524072373</created>
+      <option name="number" value="00055" />
+      <option name="presentableId" value="LOCAL-00055" />
+      <option name="project" value="LOCAL" />
+      <updated>1654524072373</updated>
+    </task>
+    <task id="LOCAL-00056" summary="Attempt to implement parallel programming on preprocessing of the files">
+      <created>1654673040866</created>
+      <option name="number" value="00056" />
+      <option name="presentableId" value="LOCAL-00056" />
+      <option name="project" value="LOCAL" />
+      <updated>1654673040866</updated>
+    </task>
+    <task id="LOCAL-00057" summary="Extra files">
+      <created>1654673259484</created>
+      <option name="number" value="00057" />
+      <option name="presentableId" value="LOCAL-00057" />
+      <option name="project" value="LOCAL" />
+      <updated>1654673259484</updated>
+    </task>
+    <task id="LOCAL-00058" summary="Extra files">
+      <created>1654673281672</created>
+      <option name="number" value="00058" />
+      <option name="presentableId" value="LOCAL-00058" />
+      <option name="project" value="LOCAL" />
+      <updated>1654673281672</updated>
+    </task>
+    <task id="LOCAL-00059" summary="Extra files">
+      <created>1654673318584</created>
+      <option name="number" value="00059" />
+      <option name="presentableId" value="LOCAL-00059" />
+      <option name="project" value="LOCAL" />
+      <updated>1654673318584</updated>
+    </task>
+    <task id="LOCAL-00060" summary="Working parallel programming of preprocess">
+      <created>1654674718499</created>
+      <option name="number" value="00060" />
+      <option name="presentableId" value="LOCAL-00060" />
+      <option name="project" value="LOCAL" />
+      <updated>1654674718499</updated>
+    </task>
+    <task id="LOCAL-00061" summary="Fix bugs in plots, hereunder fixing the annotation_TUH function">
+      <created>1654679620562</created>
+      <option name="number" value="00061" />
+      <option name="presentableId" value="LOCAL-00061" />
+      <option name="project" value="LOCAL" />
+      <updated>1654679620562</updated>
+    </task>
+    <task id="LOCAL-00062" summary="Creation of function for plotting statistics about the patients and sessions">
+      <created>1654694052121</created>
+      <option name="number" value="00062" />
+      <option name="presentableId" value="LOCAL-00062" />
+      <option name="project" value="LOCAL" />
+      <updated>1654694052121</updated>
+    </task>
+    <task id="LOCAL-00063" summary="Removal of tqdm bars since they make a lot of mixed output on the HPC">
+      <created>1654694102485</created>
+      <option name="number" value="00063" />
+      <option name="presentableId" value="LOCAL-00063" />
+      <option name="project" value="LOCAL" />
+      <updated>1654694102485</updated>
+    </task>
+    <task id="LOCAL-00064" summary="Trying to make multiprocessing work by queue. Still fails on the hpc after approx 150 files.">
+      <created>1654694163384</created>
+      <option name="number" value="00064" />
+      <option name="presentableId" value="LOCAL-00064" />
+      <option name="project" value="LOCAL" />
+      <updated>1654694163384</updated>
     </task>
-    <option name="localTasksCounter" value="48" />
+    <option name="localTasksCounter" value="65" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -557,16 +575,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="montageTest" />
-    <MESSAGE value="electrode prep, sliding window changed" />
-    <MESSAGE value="classify electrode intervals created" />
-    <MESSAGE value="label magi" />
-    <MESSAGE value="label magi updates" />
-    <MESSAGE value="Changes by marie" />
-    <MESSAGE value="shelves patches" />
-    <MESSAGE value="Changes to solveLabelChannelRelation, splitting of double labels etc." />
-    <MESSAGE value="split functions between loadFunction.py and new labelFunctions.py" />
-    <MESSAGE value="change structure to have raw and windows in EEG_dict and two functions for handling of this" />
     <MESSAGE value="pandas df patient id index overview" />
     <MESSAGE value="spring cleaning" />
     <MESSAGE value="spring cleaning 2.0" />
@@ -579,29 +587,24 @@
     <MESSAGE value="added data split by patient id to main" />
     <MESSAGE value="bug fixes" />
     <MESSAGE value="unversioned files" />
-    <MESSAGE value="counter update for windows and elec + measurres for classification" />
-    <MESSAGE value="plot for count fo windows and elec" />
-    <MESSAGE value="update new CV-functions with new accuracy meassures" />
-    <option name="LAST_COMMIT_MESSAGE" value="update new CV-functions with new accuracy meassures" />
+    <MESSAGE value="Comments and small fix to annotation algorithm" />
+    <MESSAGE value="requirements file made" />
+    <MESSAGE value="Fix of solveLabelChannelRelation() to  work for both types of csv setups" />
+    <MESSAGE value="extra data files" />
+    <MESSAGE value="xml file change" />
+    <MESSAGE value="PipelineMain save pickles of EEG_dict and index_df" />
+    <MESSAGE value="Attempt to implement parallel programming on preprocessing of the files" />
+    <MESSAGE value="Extra files" />
+    <MESSAGE value="Working parallel programming of preprocess" />
+    <MESSAGE value="Fix bugs in plots, hereunder fixing the annotation_TUH function" />
+    <MESSAGE value="Creation of function for plotting statistics about the patients and sessions" />
+    <MESSAGE value="Removal of tqdm bars since they make a lot of mixed output on the HPC" />
+    <MESSAGE value="Trying to make multiprocessing work by queue. Still fails on the hpc after approx 150 files." />
+    <option name="LAST_COMMIT_MESSAGE" value="Trying to make multiprocessing work by queue. Still fails on the hpc after approx 150 files." />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
       <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>
-          <line>65</line>
-          <option name="timeStamp" value="71" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>
-          <line>59</line>
-          <option name="timeStamp" value="72" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>
-          <line>48</line>
-          <option name="timeStamp" value="138" />
-        </line-breakpoint>
         <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
           <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>
           <line>118</line>
@@ -626,6 +629,51 @@
           <url>file://$PROJECT_DIR$/pipeline/raw_utils.py</url>
           <line>108</line>
           <option name="timeStamp" value="143" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/labelFunctions.py</url>
+          <line>173</line>
+          <option name="timeStamp" value="165" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/statFunctions.py</url>
+          <line>20</line>
+          <option name="timeStamp" value="188" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/statFunctions.py</url>
+          <line>11</line>
+          <option name="timeStamp" value="189" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/pipelineMain.py</url>
+          <line>45</line>
+          <option name="timeStamp" value="193" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/loadFunctions.py</url>
+          <line>256</line>
+          <option name="timeStamp" value="197" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/loadFunctions.py</url>
+          <line>318</line>
+          <option name="timeStamp" value="200" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/labelFunctions.py</url>
+          <line>24</line>
+          <option name="timeStamp" value="201" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/labelFunctions.py</url>
+          <line>21</line>
+          <option name="timeStamp" value="202" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/pipeline/labelFunctions.py</url>
+          <line>15</line>
+          <option name="timeStamp" value="204" />
         </line-breakpoint>
       </breakpoints>
       <default-breakpoints>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 12f2147ef907cf7b62dfeecf34c92c3b77516489)
+++ b/.idea/misc.xml	(date 1654679636842)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (FagprojektEEG)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
